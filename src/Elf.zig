const std = @import("std");
const elf = @import("elf.zig");
const builtin = std.builtin;
pub const Elf = @This();

pub const AuxType = enum(u8) {
    base = elf.AT_BASE,
    base_platform = elf.AT_BASE_PLATFORM,
    clktck = elf.AT_CLKTCK,
    dcachebsize = elf.AT_DCACHEBSIZE,
    egid = elf.AT_EGID,
    entry = elf.AT_ENTRY,
    euid = elf.AT_EUID,
    execfd = elf.AT_EXECFD,
    execfn = elf.AT_EXECFN,
    flags = elf.AT_FLAGS,
    fpucw = elf.AT_FPUCW,
    gid = elf.AT_GID,
    hwcap = elf.AT_HWCAP,
    hwcap2 = elf.AT_HWCAP2,
    hwcap3 = elf.AT_HWCAP3,
    hwcap4 = elf.AT_HWCAP4,
    icachebsize = elf.AT_ICACHEBSIZE,
    ignore = elf.AT_IGNORE,
    ignoreppc = elf.AT_IGNOREPPC,
    l1d_cachegeometry = elf.AT_L1D_CACHEGEOMETRY,
    l1d_cacheshape = elf.AT_L1D_CACHESHAPE,
    l1d_cachesize = elf.AT_L1D_CACHESIZE,
    l1i_cachegeometry = elf.AT_L1I_CACHEGEOMETRY,
    l1i_cacheshape = elf.AT_L1I_CACHESHAPE,
    l1i_cachesize = elf.AT_L1I_CACHESIZE,
    l2_cachegeometry = elf.AT_L2_CACHEGEOMETRY,
    l2_cacheshape = elf.AT_L2_CACHESHAPE,
    l2_cachesize = elf.AT_L2_CACHESIZE,
    l3_cachegeometry = elf.AT_L3_CACHEGEOMETRY,
    l3_cacheshape = elf.AT_L3_CACHESHAPE,
    l3_cachesize = elf.AT_L3_CACHESIZE,
    minsigstksz = elf.AT_MINSIGSTKSZ,
    notelf = elf.AT_NOTELF,
    null = elf.AT_NULL,
    pagesz = elf.AT_PAGESZ,
    phdr = elf.AT_PHDR,
    phent = elf.AT_PHENT,
    phnum = elf.AT_PHNUM,
    platform = elf.AT_PLATFORM,
    random = elf.AT_RANDOM,
    rseq_align = elf.AT_RSEQ_ALIGN,
    rseq_feature_size = elf.AT_RSEQ_FEATURE_SIZE,
    secure = elf.AT_SECURE,
    sysinfo = elf.AT_SYSINFO,
    sysinfo_ehdr = elf.AT_SYSINFO_EHDR,
    ucachebsize = elf.AT_UCACHEBSIZE,
    uid = elf.AT_UID,
    _,
};

pub const DynFlags1 = enum(u64) {
    confalt = elf.DF_1_CONFALT,
    direct = elf.DF_1_DIRECT,
    dispreldne = elf.DF_1_DISPRELDNE,
    disprelpnd = elf.DF_1_DISPRELPND,
    edited = elf.DF_1_EDITED,
    endfiltee = elf.DF_1_ENDFILTEE,
    global = elf.DF_1_GLOBAL,
    globaudit = elf.DF_1_GLOBAUDIT,
    group = elf.DF_1_GROUP,
    ignmuldef = elf.DF_1_IGNMULDEF,
    initfirst = elf.DF_1_INITFIRST,
    interpose = elf.DF_1_INTERPOSE,
    kmod = elf.DF_1_KMOD,
    loadfltr = elf.DF_1_LOADFLTR,
    nocommon = elf.DF_1_NOCOMMON,
    nodeflib = elf.DF_1_NODEFLIB,
    nodelete = elf.DF_1_NODELETE,
    nodirect = elf.DF_1_NODIRECT,
    nodump = elf.DF_1_NODUMP,
    nohdr = elf.DF_1_NOHDR,
    noksyms = elf.DF_1_NOKSYMS,
    noopen = elf.DF_1_NOOPEN,
    noreloc = elf.DF_1_NORELOC,
    now = elf.DF_1_NOW,
    origin = elf.DF_1_ORIGIN,
    pie = elf.DF_1_PIE,
    singleton = elf.DF_1_SINGLETON,
    stub = elf.DF_1_STUB,
    symintpose = elf.DF_1_SYMINTPOSE,
    trans = elf.DF_1_TRANS,
    weakfilter = elf.DF_1_WEAKFILTER,
    _,
};

pub const DynFlags = enum(u64) {
    bind_now = elf.DF_BIND_NOW,
    origin = elf.DF_ORIGIN,
    p1_groupperm = elf.DF_P1_GROUPPERM,
    p1_lazyload = elf.DF_P1_LAZYLOAD,
    static_tls = elf.DF_STATIC_TLS,
    symbolic = elf.DF_SYMBOLIC,
    textrel = elf.DF_TEXTREL,
    _,
};

pub const DynTransferFlags1 = enum(u64) {
    confexp = elf.DTF_1_CONFEXP,
    parinit = elf.DTF_1_PARINIT,
    _,
};

pub const DynTags = enum(u64) {
    aarch64_bti_plt = elf.DT_AARCH64_BTI_PLT,
    aarch64_num = elf.DT_AARCH64_NUM,
    aarch64_pac_plt = elf.DT_AARCH64_PAC_PLT,
    aarch64_variant_pcs = elf.DT_AARCH64_VARIANT_PCS,
    addrnum = elf.DT_ADDRNUM,
    addrrnghi = elf.DT_ADDRRNGHI,
    addrrnglo = elf.DT_ADDRRNGLO,
    alpha_num = elf.DT_ALPHA_NUM,
    alpha_pltro = elf.DT_ALPHA_PLTRO,
    audit = elf.DT_AUDIT,
    auxiliary = elf.DT_AUXILIARY,
    bind_now = elf.DT_BIND_NOW,
    checksum = elf.DT_CHECKSUM,
    config = elf.DT_CONFIG,
    debug = elf.DT_DEBUG,
    depaudit = elf.DT_DEPAUDIT,
    encoding = elf.DT_ENCODING,
    extranum = elf.DT_EXTRANUM,
    feature_1 = elf.DT_FEATURE_1,
    filter = elf.DT_FILTER,
    fini = elf.DT_FINI,
    fini_array = elf.DT_FINI_ARRAY,
    fini_arraysz = elf.DT_FINI_ARRAYSZ,
    flags = elf.DT_FLAGS,
    flags_1 = elf.DT_FLAGS_1,
    gnu_conflict = elf.DT_GNU_CONFLICT,
    gnu_conflictsz = elf.DT_GNU_CONFLICTSZ,
    gnu_hash = elf.DT_GNU_HASH,
    gnu_liblist = elf.DT_GNU_LIBLIST,
    gnu_liblistsz = elf.DT_GNU_LIBLISTSZ,
    gnu_prelinked = elf.DT_GNU_PRELINKED,
    hash = elf.DT_HASH,
    hios = elf.DT_HIOS,
    hiproc = elf.DT_HIPROC,
    ia_64_num = elf.DT_IA_64_NUM,
    ia_64_plt_reserve = elf.DT_IA_64_PLT_RESERVE,
    init = elf.DT_INIT,
    init_array = elf.DT_INIT_ARRAY,
    init_arraysz = elf.DT_INIT_ARRAYSZ,
    jmprel = elf.DT_JMPREL,
    loos = elf.DT_LOOS,
    loproc = elf.DT_LOPROC,
    mips_aux_dynamic = elf.DT_MIPS_AUX_DYNAMIC,
    mips_base_address = elf.DT_MIPS_BASE_ADDRESS,
    mips_compact_size = elf.DT_MIPS_COMPACT_SIZE,
    mips_conflict = elf.DT_MIPS_CONFLICT,
    mips_conflictno = elf.DT_MIPS_CONFLICTNO,
    mips_cxx_flags = elf.DT_MIPS_CXX_FLAGS,
    mips_delta_class = elf.DT_MIPS_DELTA_CLASS,
    mips_delta_classsym = elf.DT_MIPS_DELTA_CLASSSYM,
    mips_delta_classsym_no = elf.DT_MIPS_DELTA_CLASSSYM_NO,
    mips_delta_class_no = elf.DT_MIPS_DELTA_CLASS_NO,
    mips_delta_instance = elf.DT_MIPS_DELTA_INSTANCE,
    mips_delta_instance_no = elf.DT_MIPS_DELTA_INSTANCE_NO,
    mips_delta_reloc = elf.DT_MIPS_DELTA_RELOC,
    mips_delta_reloc_no = elf.DT_MIPS_DELTA_RELOC_NO,
    mips_delta_sym = elf.DT_MIPS_DELTA_SYM,
    mips_delta_sym_no = elf.DT_MIPS_DELTA_SYM_NO,
    mips_dynstr_align = elf.DT_MIPS_DYNSTR_ALIGN,
    mips_flags = elf.DT_MIPS_FLAGS,
    mips_gotsym = elf.DT_MIPS_GOTSYM,
    mips_gp_value = elf.DT_MIPS_GP_VALUE,
    mips_hidden_gotidx = elf.DT_MIPS_HIDDEN_GOTIDX,
    mips_hipageno = elf.DT_MIPS_HIPAGENO,
    mips_ichecksum = elf.DT_MIPS_ICHECKSUM,
    mips_interface = elf.DT_MIPS_INTERFACE,
    mips_interface_size = elf.DT_MIPS_INTERFACE_SIZE,
    mips_iversion = elf.DT_MIPS_IVERSION,
    mips_liblist = elf.DT_MIPS_LIBLIST,
    mips_liblistno = elf.DT_MIPS_LIBLISTNO,
    mips_localpage_gotidx = elf.DT_MIPS_LOCALPAGE_GOTIDX,
    mips_local_gotidx = elf.DT_MIPS_LOCAL_GOTIDX,
    mips_local_gotno = elf.DT_MIPS_LOCAL_GOTNO,
    mips_msym = elf.DT_MIPS_MSYM,
    mips_num = elf.DT_MIPS_NUM,
    mips_options = elf.DT_MIPS_OPTIONS,
    mips_perf_suffix = elf.DT_MIPS_PERF_SUFFIX,
    mips_pixie_init = elf.DT_MIPS_PIXIE_INIT,
    mips_pltgot = elf.DT_MIPS_PLTGOT,
    mips_protected_gotidx = elf.DT_MIPS_PROTECTED_GOTIDX,
    mips_rld_map = elf.DT_MIPS_RLD_MAP,
    mips_rld_map_rel = elf.DT_MIPS_RLD_MAP_REL,
    mips_rld_text_resolve_addr = elf.DT_MIPS_RLD_TEXT_RESOLVE_ADDR,
    mips_rld_version = elf.DT_MIPS_RLD_VERSION,
    mips_rwplt = elf.DT_MIPS_RWPLT,
    mips_symbol_lib = elf.DT_MIPS_SYMBOL_LIB,
    mips_symtabno = elf.DT_MIPS_SYMTABNO,
    mips_time_stamp = elf.DT_MIPS_TIME_STAMP,
    mips_unrefextno = elf.DT_MIPS_UNREFEXTNO,
    mips_xhash = elf.DT_MIPS_XHASH,
    moveent = elf.DT_MOVEENT,
    movesz = elf.DT_MOVESZ,
    movetab = elf.DT_MOVETAB,
    needed = elf.DT_NEEDED,
    nios2_gp = elf.DT_NIOS2_GP,
    null = elf.DT_NULL,
    num = elf.DT_NUM,
    pltgot = elf.DT_PLTGOT,
    pltpad = elf.DT_PLTPAD,
    pltpadsz = elf.DT_PLTPADSZ,
    pltrel = elf.DT_PLTREL,
    pltrelsz = elf.DT_PLTRELSZ,
    posflag_1 = elf.DT_POSFLAG_1,
    ppc64_glink = elf.DT_PPC64_GLINK,
    ppc64_num = elf.DT_PPC64_NUM,
    ppc64_opd = elf.DT_PPC64_OPD,
    ppc64_opdsz = elf.DT_PPC64_OPDSZ,
    ppc64_opt = elf.DT_PPC64_OPT,
    ppc_got = elf.DT_PPC_GOT,
    ppc_num = elf.DT_PPC_NUM,
    ppc_opt = elf.DT_PPC_OPT,
    preinit_array = elf.DT_PREINIT_ARRAY,
    preinit_arraysz = elf.DT_PREINIT_ARRAYSZ,
    procnum = elf.DT_PROCNUM,
    rel = elf.DT_REL,
    rela = elf.DT_RELA,
    relacount = elf.DT_RELACOUNT,
    relaent = elf.DT_RELAENT,
    relasz = elf.DT_RELASZ,
    relcount = elf.DT_RELCOUNT,
    relent = elf.DT_RELENT,
    relr = elf.DT_RELR,
    relrent = elf.DT_RELRENT,
    relrsz = elf.DT_RELRSZ,
    relsz = elf.DT_RELSZ,
    riscv_variant_cc = elf.DT_RISCV_VARIANT_CC,
    rpath = elf.DT_RPATH,
    runpath = elf.DT_RUNPATH,
    soname = elf.DT_SONAME,
    sparc_num = elf.DT_SPARC_NUM,
    sparc_register = elf.DT_SPARC_REGISTER,
    strsz = elf.DT_STRSZ,
    strtab = elf.DT_STRTAB,
    symbolic = elf.DT_SYMBOLIC,
    syment = elf.DT_SYMENT,
    syminent = elf.DT_SYMINENT,
    syminfo = elf.DT_SYMINFO,
    syminsz = elf.DT_SYMINSZ,
    symtab = elf.DT_SYMTAB,
    symtab_shndx = elf.DT_SYMTAB_SHNDX,
    textrel = elf.DT_TEXTREL,
    tlsdesc_got = elf.DT_TLSDESC_GOT,
    tlsdesc_plt = elf.DT_TLSDESC_PLT,
    valnum = elf.DT_VALNUM,
    valrnghi = elf.DT_VALRNGHI,
    valrnglo = elf.DT_VALRNGLO,
    verdef = elf.DT_VERDEF,
    verdefnum = elf.DT_VERDEFNUM,
    verneed = elf.DT_VERNEED,
    verneednum = elf.DT_VERNEEDNUM,
    versiontagnum = elf.DT_VERSIONTAGNUM,
    versym = elf.DT_VERSYM,
    x86_64_num = elf.DT_X86_64_NUM,
    x86_64_plt = elf.DT_X86_64_PLT,
    x86_64_pltent = elf.DT_X86_64_PLTENT,
    x86_64_pltsz = elf.DT_X86_64_PLTSZ,
    _,
};

pub const PariscFlags = enum(u32) {
    parisc_1_0 = elf.EFA_PARISC_1_0,
    parisc_1_1 = elf.EFA_PARISC_1_1,
    parisc_2_0 = elf.EFA_PARISC_2_0,
    _,
};

pub const ArchFlags = packed struct {
    pub const Alpha = enum(u32) {
        alpha_32bit = elf.EF_ALPHA_32BIT,
        alpha_canrelax = elf.EF_ALPHA_CANRELAX,
        _,
    };

    pub const Arc = enum(u32) {
        arc_all_msk = elf.EF_ARC_ALL_MSK,
        arc_mach_msk = elf.EF_ARC_MACH_MSK,
        arc_osabi_msk = elf.EF_ARC_OSABI_MSK,
        _,
    };

    pub const Arm = enum(u32) {
        arm_abi_float_hard = elf.EF_ARM_ABI_FLOAT_HARD,
        arm_abi_float_soft = elf.EF_ARM_ABI_FLOAT_SOFT,
        arm_align8 = elf.EF_ARM_ALIGN8,
        arm_apcs_26 = elf.EF_ARM_APCS_26,
        arm_apcs_float = elf.EF_ARM_APCS_FLOAT,
        arm_be8 = elf.EF_ARM_BE8,
        arm_dynsymsusesegidx = elf.EF_ARM_DYNSYMSUSESEGIDX,
        arm_eabimask = elf.EF_ARM_EABIMASK,
        arm_eabi_unknown = elf.EF_ARM_EABI_UNKNOWN,
        arm_eabi_ver1 = elf.EF_ARM_EABI_VER1,
        arm_eabi_ver2 = elf.EF_ARM_EABI_VER2,
        arm_eabi_ver3 = elf.EF_ARM_EABI_VER3,
        arm_eabi_ver4 = elf.EF_ARM_EABI_VER4,
        arm_eabi_ver5 = elf.EF_ARM_EABI_VER5,
        arm_hasentry = elf.EF_ARM_HASENTRY,
        arm_interwork = elf.EF_ARM_INTERWORK,
        arm_le8 = elf.EF_ARM_LE8,
        arm_mapsymsfirst = elf.EF_ARM_MAPSYMSFIRST,
        arm_maverick_float = elf.EF_ARM_MAVERICK_FLOAT,
        arm_new_abi = elf.EF_ARM_NEW_ABI,
        arm_old_abi = elf.EF_ARM_OLD_ABI,
        arm_pic = elf.EF_ARM_PIC,
        arm_relexec = elf.EF_ARM_RELEXEC,
        arm_soft_float = elf.EF_ARM_SOFT_FLOAT,
        arm_symsaresorted = elf.EF_ARM_SYMSARESORTED,
        arm_vfp_float = elf.EF_ARM_VFP_FLOAT,
        _,
    };

    pub const Cpu32 = enum(u32) {
        cpu32 = elf.EF_CPU32,
        _,
    };

    pub const Csky = enum(u32) {
        csky_abimask = elf.EF_CSKY_ABIMASK,
        csky_abiv1 = elf.EF_CSKY_ABIV1,
        csky_abiv2 = elf.EF_CSKY_ABIV2,
        csky_other = elf.EF_CSKY_OTHER,
        csky_processor = elf.EF_CSKY_PROCESSOR,
        _,
    };

    pub const Ia64 = enum(u32) {
        ia_64_abi64 = elf.EF_IA_64_ABI64,
        ia_64_arch = elf.EF_IA_64_ARCH,
        ia_64_maskos = elf.EF_IA_64_MASKOS,
        _,
    };

    pub const Larch = enum(u32) {
        larch_abi_double_float = elf.EF_LARCH_ABI_DOUBLE_FLOAT,
        larch_abi_modifier_mask = elf.EF_LARCH_ABI_MODIFIER_MASK,
        larch_abi_single_float = elf.EF_LARCH_ABI_SINGLE_FLOAT,
        larch_abi_soft_float = elf.EF_LARCH_ABI_SOFT_FLOAT,
        larch_objabi_v1 = elf.EF_LARCH_OBJABI_V1,
        _,
    };

    pub const Mips = enum(u64) {
        mips_32bitmode = elf.EF_MIPS_32BITMODE,
        mips_abi = elf.EF_MIPS_ABI,
        mips_abi2 = elf.EF_MIPS_ABI2,
        mips_abi_eabi32 = elf.EF_MIPS_ABI_EABI32,
        mips_abi_eabi64 = elf.EF_MIPS_ABI_EABI64,
        mips_abi_o32 = elf.EF_MIPS_ABI_O32,
        mips_abi_o64 = elf.EF_MIPS_ABI_O64,
        mips_abi_on32 = elf.EF_MIPS_ABI_ON32,
        mips_arch = elf.EF_MIPS_ARCH,
        mips_arch_1 = elf.EF_MIPS_ARCH_1,
        mips_arch_2 = elf.EF_MIPS_ARCH_2,
        mips_arch_3 = elf.EF_MIPS_ARCH_3,
        mips_arch_32 = elf.EF_MIPS_ARCH_32,
        mips_arch_32r2 = elf.EF_MIPS_ARCH_32R2,
        mips_arch_32r6 = elf.EF_MIPS_ARCH_32R6,
        mips_arch_4 = elf.EF_MIPS_ARCH_4,
        mips_arch_5 = elf.EF_MIPS_ARCH_5,
        mips_arch_64 = elf.EF_MIPS_ARCH_64,
        mips_arch_64r2 = elf.EF_MIPS_ARCH_64R2,
        mips_arch_64r6 = elf.EF_MIPS_ARCH_64R6,
        mips_arch_ase = elf.EF_MIPS_ARCH_ASE,
        mips_arch_ase_m16 = elf.EF_MIPS_ARCH_ASE_M16,
        mips_arch_ase_mdmx = elf.EF_MIPS_ARCH_ASE_MDMX,
        mips_arch_ase_micromips = elf.EF_MIPS_ARCH_ASE_MICROMIPS,
        mips_cpic = elf.EF_MIPS_CPIC,
        mips_fp64 = elf.EF_MIPS_FP64,
        mips_mach = elf.EF_MIPS_MACH,
        mips_mach_3900 = elf.EF_MIPS_MACH_3900,
        mips_mach_4010 = elf.EF_MIPS_MACH_4010,
        mips_mach_4100 = elf.EF_MIPS_MACH_4100,
        mips_mach_4111 = elf.EF_MIPS_MACH_4111,
        mips_mach_4120 = elf.EF_MIPS_MACH_4120,
        mips_mach_4650 = elf.EF_MIPS_MACH_4650,
        mips_mach_5400 = elf.EF_MIPS_MACH_5400,
        mips_mach_5500 = elf.EF_MIPS_MACH_5500,
        mips_mach_5900 = elf.EF_MIPS_MACH_5900,
        mips_mach_9000 = elf.EF_MIPS_MACH_9000,
        mips_mach_allegrex = elf.EF_MIPS_MACH_ALLEGREX,
        mips_mach_gs264e = elf.EF_MIPS_MACH_GS264E,
        mips_mach_gs464 = elf.EF_MIPS_MACH_GS464,
        mips_mach_gs464e = elf.EF_MIPS_MACH_GS464E,
        mips_mach_iamr2 = elf.EF_MIPS_MACH_IAMR2,
        mips_mach_ls2e = elf.EF_MIPS_MACH_LS2E,
        mips_mach_ls2f = elf.EF_MIPS_MACH_LS2F,
        mips_mach_octeon = elf.EF_MIPS_MACH_OCTEON,
        mips_mach_octeon2 = elf.EF_MIPS_MACH_OCTEON2,
        mips_mach_octeon3 = elf.EF_MIPS_MACH_OCTEON3,
        mips_mach_sb1 = elf.EF_MIPS_MACH_SB1,
        mips_mach_xlr = elf.EF_MIPS_MACH_XLR,
        mips_nan2008 = elf.EF_MIPS_NAN2008,
        mips_noreorder = elf.EF_MIPS_NOREORDER,
        mips_options_first = elf.EF_MIPS_OPTIONS_FIRST,
        mips_pic = elf.EF_MIPS_PIC,
        mips_ucode = elf.EF_MIPS_UCODE,
        mips_xgot = elf.EF_MIPS_XGOT,
        _,
    };

    pub const Parisc = enum(u64) {
        PARISC_ARCH = elf.EF_PARISC_ARCH,
        PARISC_EXT = elf.EF_PARISC_EXT,
        PARISC_LAZYSWAP = elf.EF_PARISC_LAZYSWAP,
        PARISC_LSB = elf.EF_PARISC_LSB,
        PARISC_NO_KABP = elf.EF_PARISC_NO_KABP,
        PARISC_TRAPNIL = elf.EF_PARISC_TRAPNIL,
        PARISC_WIDE = elf.EF_PARISC_WIDE,
        _,
    };

    pub const Ppc64 = enum(u8) {
        ppc64_abi = elf.EF_PPC64_ABI,
        _,
    };

    pub const Ppc = enum(u64) {
        EF_PPC_EMB = elf.EF_PPC_EMB,
        EF_PPC_RELOCATABLE = elf.EF_PPC_RELOCATABLE,
        EF_PPC_RELOCATABLE_LIB = elf.EF_PPC_RELOCATABLE_LIB,
        _,
    };

    pub const RiscV = enum(u64) {
        riscv_float_abi = elf.EF_RISCV_FLOAT_ABI,
        riscv_float_abi_double = elf.EF_RISCV_FLOAT_ABI_DOUBLE,
        riscv_float_abi_quad = elf.EF_RISCV_FLOAT_ABI_QUAD,
        riscv_float_abi_single = elf.EF_RISCV_FLOAT_ABI_SINGLE,
        riscv_float_abi_soft = elf.EF_RISCV_FLOAT_ABI_SOFT,
        riscv_rvc = elf.EF_RISCV_RVC,
        riscv_rve = elf.EF_RISCV_RVE,
        riscv_tso = elf.EF_RISCV_TSO,
        _,
    };

    pub const S390 = enum(u64) {
        s390_high_gprs = elf.EF_S390_HIGH_GPRS,
        _,
    };

    pub const Sh = enum(u8) {
        sh1 = elf.EF_SH1,
        sh2 = elf.EF_SH2,
        sh2a = elf.EF_SH2A,
        sh2a_nofpu = elf.EF_SH2A_NOFPU,
        sh2a_sh3e = elf.EF_SH2A_SH3E,
        sh2a_sh3_nofpu = elf.EF_SH2A_SH3_NOFPU,
        sh2a_sh4 = elf.EF_SH2A_SH4,
        sh2a_sh4_nofpu = elf.EF_SH2A_SH4_NOFPU,
        sh2e = elf.EF_SH2E,
        sh3 = elf.EF_SH3,
        sh3e = elf.EF_SH3E,
        sh3_dsp = elf.EF_SH3_DSP,
        sh3_nommu = elf.EF_SH3_NOMMU,
        sh4 = elf.EF_SH4,
        sh4a = elf.EF_SH4A,
        sh4al_dsp = elf.EF_SH4AL_DSP,
        sh4a_nofpu = elf.EF_SH4A_NOFPU,
        sh4_nofpu = elf.EF_SH4_NOFPU,
        sh4_nommu_nofpu = elf.EF_SH4_NOMMU_NOFPU,
        sh_dsp = elf.EF_SH_DSP,
        sh_mach_mask = elf.EF_SH_MACH_MASK,
        sh_unknown = elf.EF_SH_UNKNOWN,
        _,
    };

    pub const SparcV = enum(u64) {
        sparcv9_mm = elf.EF_SPARCV9_MM,
        sparcv9_pso = elf.EF_SPARCV9_PSO,
        sparcv9_rmo = elf.EF_SPARCV9_RMO,
        sparcv9_tso = elf.EF_SPARCV9_TSO,
        sparc_32plus = elf.EF_SPARC_32PLUS,
        sparc_ext_mask = elf.EF_SPARC_EXT_MASK,
        sparc_hal_r1 = elf.EF_SPARC_HAL_R1,
        sparc_ledata = elf.EF_SPARC_LEDATA,
        sparc_sun_us1 = elf.EF_SPARC_SUN_US1,
        sparc_sun_us3 = elf.EF_SPARC_SUN_US3,
        _,
    };
};

pub const IdentIndex = enum(u8) {
    abiversion = elf.EI_ABIVERSION,
    class = elf.EI_CLASS,
    data = elf.EI_DATA,
    mag0 = elf.EI_MAG0,
    mag1 = elf.EI_MAG1,
    mag2 = elf.EI_MAG2,
    mag3 = elf.EI_MAG3,
    osabi = elf.EI_OSABI,
    pad = elf.EI_PAD,
    version = elf.EI_VERSION,
    _,
};

pub const Class = enum(u8) {
    class32 = elf.ELFCLASS32,
    class64 = elf.ELFCLASS64,
    classnone = elf.ELFCLASSNONE,
    classnum = elf.ELFCLASSNUM,
    _,
};

pub const Compress = enum(u32) {
    hios = elf.ELFCOMPRESS_HIOS,
    hiproc = elf.ELFCOMPRESS_HIPROC,
    loos = elf.ELFCOMPRESS_LOOS,
    loproc = elf.ELFCOMPRESS_LOPROC,
    zlib = elf.ELFCOMPRESS_ZLIB,
    zstd = elf.ELFCOMPRESS_ZSTD,
    _,
};

pub const Data = enum(u8) {
    lsb = elf.ELFDATA2LSB,
    msb = elf.ELFDATA2MSB,
    none = elf.ELFDATANONE,
    num = elf.ELFDATANUM,
    _,
};

pub const Magic = enum(u8) {
    mag0 = 0x7f,
    mag1 = 'E',
    mag2 = 'L',
    mag3 = 'F',
    _,
};

pub const OsAbi = enum(u8) {
    aix = elf.ELFOSABI_AIX,
    arm = elf.ELFOSABI_ARM,
    arm_aeabi = elf.ELFOSABI_ARM_AEABI,
    freebsd = elf.ELFOSABI_FREEBSD,
    gnu = elf.ELFOSABI_GNU,
    hpux = elf.ELFOSABI_HPUX,
    irix = elf.ELFOSABI_IRIX,
    linux = elf.ELFOSABI_LINUX,
    modesto = elf.ELFOSABI_MODESTO,
    netbsd = elf.ELFOSABI_NETBSD,
    none = elf.ELFOSABI_NONE,
    openbsd = elf.ELFOSABI_OPENBSD,
    solaris = elf.ELFOSABI_SOLARIS,
    standalone = elf.ELFOSABI_STANDALONE,
    sysv = elf.ELFOSABI_SYSV,
    tru64 = elf.ELFOSABI_TRU64,
    _,
};

pub const Note = struct {
    pub const abi = elf.ELF_NOTE_ABI;
    pub const fdo = elf.ELF_NOTE_FDO;
    pub const gnu = elf.ELF_NOTE_GNU;
    pub const os_freebsd = elf.ELF_NOTE_OS_FREEBSD;
    pub const os_gnu = elf.ELF_NOTE_OS_GNU;
    pub const os_linux = elf.ELF_NOTE_OS_LINUX;
    pub const os_solaris2 = elf.ELF_NOTE_OS_SOLARIS2;
    pub const pagesize_hint = elf.ELF_NOTE_PAGESIZE_HINT;
    pub const solaris = elf.ELF_NOTE_SOLARIS;
};

pub const Machine = enum(u16) {
    @"386" = elf.EM_386,
    @"56800ex" = elf.EM_56800EX,
    @"68hc05" = elf.EM_68HC05,
    @"68hc08" = elf.EM_68HC08,
    @"68hc11" = elf.EM_68HC11,
    @"68hc12" = elf.EM_68HC12,
    @"68hc16" = elf.EM_68HC16,
    @"68k" = elf.EM_68K,
    @"78kor" = elf.EM_78KOR,
    @"8051" = elf.EM_8051,
    @"860" = elf.EM_860,
    @"88k" = elf.EM_88K,
    @"960" = elf.EM_960,
    aarch64 = elf.EM_AARCH64,
    alpha = elf.EM_ALPHA,
    altera_nios2 = elf.EM_ALTERA_NIOS2,
    amdgpu = elf.EM_AMDGPU,
    arc = elf.EM_ARC,
    arca = elf.EM_ARCA,
    arcv2 = elf.EM_ARCV2,
    arc_a5 = elf.EM_ARC_A5,
    arc_compact = elf.EM_ARC_COMPACT,
    arm = elf.EM_ARM,
    avr = elf.EM_AVR,
    avr32 = elf.EM_AVR32,
    ba1 = elf.EM_BA1,
    ba2 = elf.EM_BA2,
    blackfin = elf.EM_BLACKFIN,
    bpf = elf.EM_BPF,
    c166 = elf.EM_C166,
    cdp = elf.EM_CDP,
    ce = elf.EM_CE,
    cloudshield = elf.EM_CLOUDSHIELD,
    coge = elf.EM_COGE,
    coldfire = elf.EM_COLDFIRE,
    cool = elf.EM_COOL,
    corea_1st = elf.EM_COREA_1ST,
    corea_2nd = elf.EM_COREA_2ND,
    cr = elf.EM_CR,
    cr16 = elf.EM_CR16,
    craynv2 = elf.EM_CRAYNV2,
    cris = elf.EM_CRIS,
    crx = elf.EM_CRX,
    csky = elf.EM_CSKY,
    csr_kalimba = elf.EM_CSR_KALIMBA,
    cuda = elf.EM_CUDA,
    cypress_m8c = elf.EM_CYPRESS_M8C,
    d10v = elf.EM_D10V,
    d30v = elf.EM_D30V,
    dsp24 = elf.EM_DSP24,
    dspic30f = elf.EM_DSPIC30F,
    dxp = elf.EM_DXP,
    ecog16 = elf.EM_ECOG16,
    ecog1x = elf.EM_ECOG1X,
    ecog2 = elf.EM_ECOG2,
    emx16 = elf.EM_EMX16,
    emx8 = elf.EM_EMX8,
    etpu = elf.EM_ETPU,
    excess = elf.EM_EXCESS,
    f2mc16 = elf.EM_F2MC16,
    fake_alpha = elf.EM_FAKE_ALPHA,
    firepath = elf.EM_FIREPATH,
    fr20 = elf.EM_FR20,
    fr30 = elf.EM_FR30,
    ft32 = elf.EM_FT32,
    fx66 = elf.EM_FX66,
    h8s = elf.EM_H8S,
    h8_300 = elf.EM_H8_300,
    h8_300h = elf.EM_H8_300H,
    h8_500 = elf.EM_H8_500,
    huany = elf.EM_HUANY,
    iamcu = elf.EM_IAMCU,
    ia_64 = elf.EM_IA_64,
    intelgt = elf.EM_INTELGT,
    ip2k = elf.EM_IP2K,
    javelin = elf.EM_JAVELIN,
    k10m = elf.EM_K10M,
    km32 = elf.EM_KM32,
    kmx32 = elf.EM_KMX32,
    kvarc = elf.EM_KVARC,
    l10m = elf.EM_L10M,
    latticemico32 = elf.EM_LATTICEMICO32,
    loongarch = elf.EM_LOONGARCH,
    m16c = elf.EM_M16C,
    m32 = elf.EM_M32,
    m32c = elf.EM_M32C,
    m32r = elf.EM_M32R,
    manik = elf.EM_MANIK,
    max = elf.EM_MAX,
    maxq30 = elf.EM_MAXQ30,
    mchp_pic = elf.EM_MCHP_PIC,
    mcst_elbrus = elf.EM_MCST_ELBRUS,
    me16 = elf.EM_ME16,
    metag = elf.EM_METAG,
    microblaze = elf.EM_MICROBLAZE,
    mips = elf.EM_MIPS,
    mips_rs3_le = elf.EM_MIPS_RS3_LE,
    mips_x = elf.EM_MIPS_X,
    mma = elf.EM_MMA,
    mmdsp_plus = elf.EM_MMDSP_PLUS,
    mmix = elf.EM_MMIX,
    mn10200 = elf.EM_MN10200,
    mn10300 = elf.EM_MN10300,
    moxie = elf.EM_MOXIE,
    msp430 = elf.EM_MSP430,
    ncpu = elf.EM_NCPU,
    ndr1 = elf.EM_NDR1,
    nds32 = elf.EM_NDS32,
    none = elf.EM_NONE,
    norc = elf.EM_NORC,
    ns32k = elf.EM_NS32K,
    num = elf.EM_NUM,
    open8 = elf.EM_OPEN8,
    openrisc = elf.EM_OPENRISC,
    parisc = elf.EM_PARISC,
    pcp = elf.EM_PCP,
    pdp10 = elf.EM_PDP10,
    pdp11 = elf.EM_PDP11,
    pdsp = elf.EM_PDSP,
    pj = elf.EM_PJ,
    ppc = elf.EM_PPC,
    ppc64 = elf.EM_PPC64,
    prism = elf.EM_PRISM,
    qdsp6 = elf.EM_QDSP6,
    r32c = elf.EM_R32C,
    rce = elf.EM_RCE,
    rh32 = elf.EM_RH32,
    riscv = elf.EM_RISCV,
    rl78 = elf.EM_RL78,
    rs08 = elf.EM_RS08,
    rx = elf.EM_RX,
    s370 = elf.EM_S370,
    s390 = elf.EM_S390,
    score7 = elf.EM_SCORE7,
    sep = elf.EM_SEP,
    se_c17 = elf.EM_SE_C17,
    se_c33 = elf.EM_SE_C33,
    sh = elf.EM_SH,
    sharc = elf.EM_SHARC,
    sle9x = elf.EM_SLE9X,
    snp1k = elf.EM_SNP1K,
    sparc = elf.EM_SPARC,
    sparc32plus = elf.EM_SPARC32PLUS,
    sparcv9 = elf.EM_SPARCV9,
    spu = elf.EM_SPU,
    st100 = elf.EM_ST100,
    st19 = elf.EM_ST19,
    st200 = elf.EM_ST200,
    st7 = elf.EM_ST7,
    st9plus = elf.EM_ST9PLUS,
    starcore = elf.EM_STARCORE,
    stm8 = elf.EM_STM8,
    stxp7x = elf.EM_STXP7X,
    svx = elf.EM_SVX,
    tile64 = elf.EM_TILE64,
    tilegx = elf.EM_TILEGX,
    tilepro = elf.EM_TILEPRO,
    tinyj = elf.EM_TINYJ,
    ti_arp32 = elf.EM_TI_ARP32,
    ti_c2000 = elf.EM_TI_C2000,
    ti_c5500 = elf.EM_TI_C5500,
    ti_c6000 = elf.EM_TI_C6000,
    ti_pru = elf.EM_TI_PRU,
    tmm_gpp = elf.EM_TMM_GPP,
    tpc = elf.EM_TPC,
    tricore = elf.EM_TRICORE,
    trimedia = elf.EM_TRIMEDIA,
    tsk3000 = elf.EM_TSK3000,
    unicore = elf.EM_UNICORE,
    v800 = elf.EM_V800,
    v850 = elf.EM_V850,
    vax = elf.EM_VAX,
    videocore = elf.EM_VIDEOCORE,
    videocore3 = elf.EM_VIDEOCORE3,
    videocore5 = elf.EM_VIDEOCORE5,
    visium = elf.EM_VISIUM,
    vpp500 = elf.EM_VPP500,
    x86_64 = elf.EM_X86_64,
    xcore = elf.EM_XCORE,
    xgate = elf.EM_XGATE,
    ximo16 = elf.EM_XIMO16,
    xtensa = elf.EM_XTENSA,
    z80 = elf.EM_Z80,
    zsp = elf.EM_ZSP,
    _,
};

pub const MipsArch = enum(u32) {
    arch_1 = elf.E_MIPS_ARCH_1,
    arch_2 = elf.E_MIPS_ARCH_2,
    arch_3 = elf.E_MIPS_ARCH_3,
    arch_32 = elf.E_MIPS_ARCH_32,
    arch_4 = elf.E_MIPS_ARCH_4,
    arch_5 = elf.E_MIPS_ARCH_5,
    arch_64 = elf.E_MIPS_ARCH_64,
    _,
};

pub const GnuProperty = enum(u32) {
    @"1_needed" = elf.GNU_PROPERTY_1_NEEDED,
    @"1_needed_indirect_extern_access" = elf.GNU_PROPERTY_1_NEEDED_INDIRECT_EXTERN_ACCESS,
    aarch64_feature_1_and = elf.GNU_PROPERTY_AARCH64_FEATURE_1_AND,
    aarch64_feature_1_bti = elf.GNU_PROPERTY_AARCH64_FEATURE_1_BTI,
    aarch64_feature_1_gcs = elf.GNU_PROPERTY_AARCH64_FEATURE_1_GCS,
    aarch64_feature_1_pac = elf.GNU_PROPERTY_AARCH64_FEATURE_1_PAC,
    hiproc = elf.GNU_PROPERTY_HIPROC,
    hiuser = elf.GNU_PROPERTY_HIUSER,
    loproc = elf.GNU_PROPERTY_LOPROC,
    louser = elf.GNU_PROPERTY_LOUSER,
    no_copy_on_protected = elf.GNU_PROPERTY_NO_COPY_ON_PROTECTED,
    stack_size = elf.GNU_PROPERTY_STACK_SIZE,
    uint32_and_hi = elf.GNU_PROPERTY_UINT32_AND_HI,
    uint32_and_lo = elf.GNU_PROPERTY_UINT32_AND_LO,
    uint32_or_hi = elf.GNU_PROPERTY_UINT32_OR_HI,
    uint32_or_lo = elf.GNU_PROPERTY_UINT32_OR_LO,
    x86_feature_1_and = elf.GNU_PROPERTY_X86_FEATURE_1_AND,
    x86_feature_1_ibt = elf.GNU_PROPERTY_X86_FEATURE_1_IBT,
    x86_feature_1_shstk = elf.GNU_PROPERTY_X86_FEATURE_1_SHSTK,
    x86_isa_1_baseline = elf.GNU_PROPERTY_X86_ISA_1_BASELINE,
    x86_isa_1_needed = elf.GNU_PROPERTY_X86_ISA_1_NEEDED,
    x86_isa_1_used = elf.GNU_PROPERTY_X86_ISA_1_USED,
    x86_isa_1_v2 = elf.GNU_PROPERTY_X86_ISA_1_V2,
    x86_isa_1_v3 = elf.GNU_PROPERTY_X86_ISA_1_V3,
    x86_isa_1_v4 = elf.GNU_PROPERTY_X86_ISA_1_V4,
    _,
};

pub const Lituse = enum(u8) {
    alpha_addr = elf.LITUSE_ALPHA_ADDR,
    alpha_base = elf.LITUSE_ALPHA_BASE,
    alpha_bytoff = elf.LITUSE_ALPHA_BYTOFF,
    alpha_jsr = elf.LITUSE_ALPHA_JSR,
    alpha_tls_gd = elf.LITUSE_ALPHA_TLS_GD,
    alpha_tls_ldm = elf.LITUSE_ALPHA_TLS_LDM,
    _,
};

pub const Ll = enum(u8) {
    delay_load = elf.LL_DELAY_LOAD,
    delta = elf.LL_DELTA,
    exact_match = elf.LL_EXACT_MATCH,
    exports = elf.LL_EXPORTS,
    ignore_int_ver = elf.LL_IGNORE_INT_VER,
    none = elf.LL_NONE,
    require_minor = elf.LL_REQUIRE_MINOR,
    _,
};

pub const MipsFlagsAse = enum(u32) {
    dsp = elf.MIPS_AFL_ASE_DSP,
    dspr2 = elf.MIPS_AFL_ASE_DSPR2,
    eva = elf.MIPS_AFL_ASE_EVA,
    mask = elf.MIPS_AFL_ASE_MASK,
    mcu = elf.MIPS_AFL_ASE_MCU,
    mdmx = elf.MIPS_AFL_ASE_MDMX,
    micromips = elf.MIPS_AFL_ASE_MICROMIPS,
    mips16 = elf.MIPS_AFL_ASE_MIPS16,
    mips3d = elf.MIPS_AFL_ASE_MIPS3D,
    msa = elf.MIPS_AFL_ASE_MSA,
    mt = elf.MIPS_AFL_ASE_MT,
    smartmips = elf.MIPS_AFL_ASE_SMARTMIPS,
    virt = elf.MIPS_AFL_ASE_VIRT,
    xpa = elf.MIPS_AFL_ASE_XPA,
    _,
};

pub const MipsFlagsExt = enum(u8) {
    @"10000" = elf.MIPS_AFL_EXT_10000,
    @"3900" = elf.MIPS_AFL_EXT_3900,
    @"4010" = elf.MIPS_AFL_EXT_4010,
    @"4100" = elf.MIPS_AFL_EXT_4100,
    @"4111" = elf.MIPS_AFL_EXT_4111,
    @"4120" = elf.MIPS_AFL_EXT_4120,
    @"4650" = elf.MIPS_AFL_EXT_4650,
    @"5400" = elf.MIPS_AFL_EXT_5400,
    @"5500" = elf.MIPS_AFL_EXT_5500,
    @"5900" = elf.MIPS_AFL_EXT_5900,
    LOONGSON_2E = elf.MIPS_AFL_EXT_LOONGSON_2E,
    LOONGSON_2F = elf.MIPS_AFL_EXT_LOONGSON_2F,
    LOONGSON_3A = elf.MIPS_AFL_EXT_LOONGSON_3A,
    OCTEON = elf.MIPS_AFL_EXT_OCTEON,
    OCTEON2 = elf.MIPS_AFL_EXT_OCTEON2,
    OCTEONP = elf.MIPS_AFL_EXT_OCTEONP,
    SB1 = elf.MIPS_AFL_EXT_SB1,
    XLR = elf.MIPS_AFL_EXT_XLR,
    _,
};

pub const MIPS_AFL_FLAGS1_ODDSPREG = elf.MIPS_AFL_FLAGS1_ODDSPREG;

pub const MipsFlagsReg = enum(u8) {
    @"128" = elf.MIPS_AFL_REG_128,
    @"32" = elf.MIPS_AFL_REG_32,
    @"64" = elf.MIPS_AFL_REG_64,
    none = elf.MIPS_AFL_REG_NONE,
    _,
};

pub const NoteType = enum(u32) {
    asrs = elf.NT_ASRS,
    auxv = elf.NT_AUXV,
    file = elf.NT_FILE,
    fpregset = elf.NT_FPREGSET,
    lwpsinfo = elf.NT_LWPSINFO,
    lwpstatus = elf.NT_LWPSTATUS,
    platform = elf.NT_PLATFORM,
    prcred = elf.NT_PRCRED,
    prfpreg = elf.NT_PRFPREG,
    prfpxreg = elf.NT_PRFPXREG,
    prpsinfo = elf.NT_PRPSINFO,
    prstatus = elf.NT_PRSTATUS,
    prxfpreg = elf.NT_PRXFPREG,
    prxreg = elf.NT_PRXREG,
    psinfo = elf.NT_PSINFO,
    pstatus = elf.NT_PSTATUS,
    siginfo = elf.NT_SIGINFO,
    taskstruct = elf.NT_TASKSTRUCT,
    utsname = elf.NT_UTSNAME,
    version = elf.NT_VERSION,
    vmcoredd = elf.NT_VMCOREDD,
    gwindows = elf.NT_GWINDOWS,
    _,
};

pub const GnuNoteType = enum(u8) {
    abi_tag = elf.NT_GNU_ABI_TAG,
    build_id = elf.NT_GNU_BUILD_ID,
    gold_version = elf.NT_GNU_GOLD_VERSION,
    hwcap = elf.NT_GNU_HWCAP,
    property_type_0 = elf.NT_GNU_PROPERTY_TYPE_0,
    _,
};

pub const LoongArchNoteType = enum(u16) {
    cpucfg = elf.NT_LOONGARCH_CPUCFG,
    csr = elf.NT_LOONGARCH_CSR,
    hw_break = elf.NT_LOONGARCH_HW_BREAK,
    hw_watch = elf.NT_LOONGARCH_HW_WATCH,
    lasx = elf.NT_LOONGARCH_LASX,
    lbt = elf.NT_LOONGARCH_LBT,
    lsx = elf.NT_LOONGARCH_LSX,
    _,
};

pub const MipsNoteType = enum(u16) {
    dsp = elf.NT_MIPS_DSP,
    fp_mode = elf.NT_MIPS_FP_MODE,
    msa = elf.NT_MIPS_MSA,
    _,
};

pub const PpcNoteType = enum(u16) {
    dexcr = elf.NT_PPC_DEXCR,
    dscr = elf.NT_PPC_DSCR,
    ebb = elf.NT_PPC_EBB,
    hashkeyr = elf.NT_PPC_HASHKEYR,
    pkey = elf.NT_PPC_PKEY,
    pmu = elf.NT_PPC_PMU,
    ppr = elf.NT_PPC_PPR,
    spe = elf.NT_PPC_SPE,
    tar = elf.NT_PPC_TAR,
    tm_cdscr = elf.NT_PPC_TM_CDSCR,
    tm_cfpr = elf.NT_PPC_TM_CFPR,
    tm_cgpr = elf.NT_PPC_TM_CGPR,
    tm_cppr = elf.NT_PPC_TM_CPPR,
    tm_ctar = elf.NT_PPC_TM_CTAR,
    tm_cvmx = elf.NT_PPC_TM_CVMX,
    tm_cvsx = elf.NT_PPC_TM_CVSX,
    tm_spr = elf.NT_PPC_TM_SPR,
    vmx = elf.NT_PPC_VMX,
    vsx = elf.NT_PPC_VSX,
    _,
};

pub const RiscVNoteType = enum(u16) {
    csr = elf.NT_RISCV_CSR,
    vector = elf.NT_RISCV_VECTOR,
    _,
};

pub const S390NoteType = enum(u16) {
    ctrs = elf.NT_S390_CTRS,
    gs_bc = elf.NT_S390_GS_BC,
    gs_cb = elf.NT_S390_GS_CB,
    high_gprs = elf.NT_S390_HIGH_GPRS,
    last_break = elf.NT_S390_LAST_BREAK,
    prefix = elf.NT_S390_PREFIX,
    pv_cpu_data = elf.NT_S390_PV_CPU_DATA,
    ri_cb = elf.NT_S390_RI_CB,
    system_call = elf.NT_S390_SYSTEM_CALL,
    tdb = elf.NT_S390_TDB,
    timer = elf.NT_S390_TIMER,
    todcmp = elf.NT_S390_TODCMP,
    todpreg = elf.NT_S390_TODPREG,
    vxrs_high = elf.NT_S390_VXRS_HIGH,
    vxrs_low = elf.NT_S390_VXRS_LOW,
    _,
};

pub const X86NoteType = enum(u16) {
    shstk = elf.NT_X86_SHSTK,
    xsave_layout = elf.NT_X86_XSAVE_LAYOUT,
    xstate = elf.NT_X86_XSTATE,
    _,
};

pub const MipsOptionKind = enum(u8) {
    exceptions = elf.ODK_EXCEPTIONS,
    fill = elf.ODK_FILL,
    hwand = elf.ODK_HWAND,
    hwor = elf.ODK_HWOR,
    hwpatch = elf.ODK_HWPATCH,
    null = elf.ODK_NULL,
    pad = elf.ODK_PAD,
    reginfo = elf.ODK_REGINFO,
    tags = elf.ODK_TAGS,
    _,
};

pub const MipsExceptionFlags = enum(u32) {
    dismiss = elf.OEX_DISMISS,
    fpdbug = elf.OEX_FPDBUG,
    fpu_div0 = elf.OEX_FPU_DIV0,
    fpu_inex = elf.OEX_FPU_INEX,
    fpu_inval = elf.OEX_FPU_INVAL,
    fpu_max = elf.OEX_FPU_MAX,
    fpu_min = elf.OEX_FPU_MIN,
    fpu_oflo = elf.OEX_FPU_OFLO,
    fpu_uflo = elf.OEX_FPU_UFLO,
    page0 = elf.OEX_PAGE0,
    precisefp = elf.OEX_PRECISEFP,
    smm = elf.OEX_SMM,
    _,
};

pub const MipsHwAttrs0 = enum(u32) {
    checked = elf.OHWA0_R4KEOP_CHECKED,
    _,
};

pub const MipsHwAttrs1 = enum(u32) {
    clean = elf.OHWA1_R4KEOP_CLEAN,
    _,
};

pub const MipsHwFeatures = enum(u32) {
    r4keop = elf.OHW_R4KEOP,
    r5kcvtl = elf.OHW_R5KCVTL,
    r5keop = elf.OHW_R5KEOP,
    r8kpfetch = elf.OHW_R8KPFETCH,
    _,
};

pub const MipsPaddingFlags = enum(u8) {
    postfix = elf.OPAD_POSTFIX,
    prefix = elf.OPAD_PREFIX,
    symbol = elf.OPAD_SYMBOL,
    _,
};

pub const ProgramFlags = enum(u32) {
    r = elf.PF_R,
    w = elf.PF_W,
    x = elf.PF_X,
    maskos = elf.PF_MASKOS,
    maskproc = elf.PF_MASKPROC,
    _,
};

pub const ArmProgramFlags = enum(u32) {
    abs = elf.PF_ARM_ABS,
    pi = elf.PF_ARM_PI,
    sb = elf.PF_ARM_SB,
    _,
};

pub const HpProgramFlags = enum(u32) {
    code = elf.PF_HP_CODE,
    far_shared = elf.PF_HP_FAR_SHARED,
    lazyswap = elf.PF_HP_LAZYSWAP,
    modify = elf.PF_HP_MODIFY,
    near_shared = elf.PF_HP_NEAR_SHARED,
    page_size = elf.PF_HP_PAGE_SIZE,
    sbp = elf.PF_HP_SBP,
    _,
};

pub const Ia64ProgramFlags = enum(u32) {
    norecov = elf.PF_IA_64_NORECOV,
    _,
};

pub const MipsProgramFlags = enum(u32) {
    local = elf.PF_MIPS_LOCAL,
    _,
};

pub const PariscProgramFlags = enum(u32) {
    sbp = elf.PF_PARISC_SBP,
    _,
};

pub const Ppc64OptionFlags = enum(u32) {
    localentry = elf.PPC64_OPT_LOCALENTRY,
    multi_toc = elf.PPC64_OPT_MULTI_TOC,
    tls = elf.PPC64_OPT_TLS,
    _,
};

pub const PpcOptionFlags = enum(u32) {
    tls = elf.PPC_OPT_TLS,
    _,
};

pub const ProgramType = enum(u32) {
    aarch64_memtag_mte = elf.PT_AARCH64_MEMTAG_MTE,
    arm_exidx = elf.PT_ARM_EXIDX,
    dynamic = elf.PT_DYNAMIC,
    gnu_eh_frame = elf.PT_GNU_EH_FRAME,
    gnu_property = elf.PT_GNU_PROPERTY,
    gnu_relro = elf.PT_GNU_RELRO,
    gnu_sframe = elf.PT_GNU_SFRAME,
    gnu_stack = elf.PT_GNU_STACK,
    hios = elf.PT_HIOS,
    hiproc = elf.PT_HIPROC,
    hisunw = elf.PT_HISUNW,
    hp_core_comm = elf.PT_HP_CORE_COMM,
    hp_core_kernel = elf.PT_HP_CORE_KERNEL,
    hp_core_loadable = elf.PT_HP_CORE_LOADABLE,
    hp_core_mmf = elf.PT_HP_CORE_MMF,
    hp_core_none = elf.PT_HP_CORE_NONE,
    hp_core_proc = elf.PT_HP_CORE_PROC,
    hp_core_shm = elf.PT_HP_CORE_SHM,
    hp_core_stack = elf.PT_HP_CORE_STACK,
    hp_core_version = elf.PT_HP_CORE_VERSION,
    hp_fastbind = elf.PT_HP_FASTBIND,
    hp_hsl_annot = elf.PT_HP_HSL_ANNOT,
    hp_opt_annot = elf.PT_HP_OPT_ANNOT,
    hp_parallel = elf.PT_HP_PARALLEL,
    hp_stack = elf.PT_HP_STACK,
    hp_tls = elf.PT_HP_TLS,
    ia_64_archext = elf.PT_IA_64_ARCHEXT,
    ia_64_hp_hsl_anot = elf.PT_IA_64_HP_HSL_ANOT,
    ia_64_hp_opt_anot = elf.PT_IA_64_HP_OPT_ANOT,
    ia_64_hp_stack = elf.PT_IA_64_HP_STACK,
    ia_64_unwind = elf.PT_IA_64_UNWIND,
    interp = elf.PT_INTERP,
    load = elf.PT_LOAD,
    loos = elf.PT_LOOS,
    loproc = elf.PT_LOPROC,
    losunw = elf.PT_LOSUNW,
    mips_abiflags = elf.PT_MIPS_ABIFLAGS,
    mips_options = elf.PT_MIPS_OPTIONS,
    mips_reginfo = elf.PT_MIPS_REGINFO,
    mips_rtproc = elf.PT_MIPS_RTPROC,
    note = elf.PT_NOTE,
    null = elf.PT_NULL,
    num = elf.PT_NUM,
    parisc_archext = elf.PT_PARISC_ARCHEXT,
    parisc_unwind = elf.PT_PARISC_UNWIND,
    phdr = elf.PT_PHDR,
    riscv_attributes = elf.PT_RISCV_ATTRIBUTES,
    shlib = elf.PT_SHLIB,
    sunwbss = elf.PT_SUNWBSS,
    sunwstack = elf.PT_SUNWSTACK,
    tls = elf.PT_TLS,
    _,
};

pub const MipsRuntimeFlags = enum(u32) {
    cord = elf.RHF_CORD,
    default_delay_load = elf.RHF_DEFAULT_DELAY_LOAD,
    delta_c_plus_plus = elf.RHF_DELTA_C_PLUS_PLUS,
    guarantee_init = elf.RHF_GUARANTEE_INIT,
    guarantee_start_init = elf.RHF_GUARANTEE_START_INIT,
    none = elf.RHF_NONE,
    notpot = elf.RHF_NOTPOT,
    no_library_replacement = elf.RHF_NO_LIBRARY_REPLACEMENT,
    no_move = elf.RHF_NO_MOVE,
    no_unres_undef = elf.RHF_NO_UNRES_UNDEF,
    pixie = elf.RHF_PIXIE,
    quickstart = elf.RHF_QUICKSTART,
    requickstart = elf.RHF_REQUICKSTART,
    requickstarted = elf.RHF_REQUICKSTARTED,
    rld_order_safe = elf.RHF_RLD_ORDER_SAFE,
    sgi_only = elf.RHF_SGI_ONLY,
    _,
};

pub const Relocation = struct {
    pub const @"386" = enum(u8) {
        @"16" = elf.R_386_16,
        @"32" = elf.R_386_32,
        @"32plt" = elf.R_386_32PLT,
        @"8" = elf.R_386_8,
        copy = elf.R_386_COPY,
        glob_dat = elf.R_386_GLOB_DAT,
        got32 = elf.R_386_GOT32,
        got32x = elf.R_386_GOT32X,
        gotoff = elf.R_386_GOTOFF,
        gotpc = elf.R_386_GOTPC,
        irelative = elf.R_386_IRELATIVE,
        jmp_slot = elf.R_386_JMP_SLOT,
        none = elf.R_386_NONE,
        num = elf.R_386_NUM,
        pc16 = elf.R_386_PC16,
        pc32 = elf.R_386_PC32,
        pc8 = elf.R_386_PC8,
        plt32 = elf.R_386_PLT32,
        relative = elf.R_386_RELATIVE,
        size32 = elf.R_386_SIZE32,
        tls_desc = elf.R_386_TLS_DESC,
        tls_desc_call = elf.R_386_TLS_DESC_CALL,
        tls_dtpmod32 = elf.R_386_TLS_DTPMOD32,
        tls_dtpoff32 = elf.R_386_TLS_DTPOFF32,
        tls_gd = elf.R_386_TLS_GD,
        tls_gd_32 = elf.R_386_TLS_GD_32,
        tls_gd_call = elf.R_386_TLS_GD_CALL,
        tls_gd_pop = elf.R_386_TLS_GD_POP,
        tls_gd_push = elf.R_386_TLS_GD_PUSH,
        tls_gotdesc = elf.R_386_TLS_GOTDESC,
        tls_gotie = elf.R_386_TLS_GOTIE,
        tls_ie = elf.R_386_TLS_IE,
        tls_ie_32 = elf.R_386_TLS_IE_32,
        tls_ldm = elf.R_386_TLS_LDM,
        tls_ldm_32 = elf.R_386_TLS_LDM_32,
        tls_ldm_call = elf.R_386_TLS_LDM_CALL,
        tls_ldm_pop = elf.R_386_TLS_LDM_POP,
        tls_ldm_push = elf.R_386_TLS_LDM_PUSH,
        tls_ldo_32 = elf.R_386_TLS_LDO_32,
        tls_le = elf.R_386_TLS_LE,
        tls_le_32 = elf.R_386_TLS_LE_32,
        tls_tpoff = elf.R_386_TLS_TPOFF,
        tls_tpoff32 = elf.R_386_TLS_TPOFF32,
    };

    pub const @"390" = enum(u8) {
        @"12" = elf.R_390_12,
        @"16" = elf.R_390_16,
        @"20" = elf.R_390_20,
        @"32" = elf.R_390_32,
        @"64" = elf.R_390_64,
        @"8" = elf.R_390_8,
        copy = elf.R_390_COPY,
        glob_dat = elf.R_390_GLOB_DAT,
        got12 = elf.R_390_GOT12,
        got16 = elf.R_390_GOT16,
        got20 = elf.R_390_GOT20,
        got32 = elf.R_390_GOT32,
        got64 = elf.R_390_GOT64,
        gotent = elf.R_390_GOTENT,
        gotoff16 = elf.R_390_GOTOFF16,
        gotoff32 = elf.R_390_GOTOFF32,
        gotoff64 = elf.R_390_GOTOFF64,
        gotpc = elf.R_390_GOTPC,
        gotpcdbl = elf.R_390_GOTPCDBL,
        gotplt12 = elf.R_390_GOTPLT12,
        gotplt16 = elf.R_390_GOTPLT16,
        gotplt20 = elf.R_390_GOTPLT20,
        gotplt32 = elf.R_390_GOTPLT32,
        gotplt64 = elf.R_390_GOTPLT64,
        gotpltent = elf.R_390_GOTPLTENT,
        irelative = elf.R_390_IRELATIVE,
        jmp_slot = elf.R_390_JMP_SLOT,
        none = elf.R_390_NONE,
        num = elf.R_390_NUM,
        pc16 = elf.R_390_PC16,
        pc16dbl = elf.R_390_PC16DBL,
        pc32 = elf.R_390_PC32,
        pc32dbl = elf.R_390_PC32DBL,
        pc64 = elf.R_390_PC64,
        plt16dbl = elf.R_390_PLT16DBL,
        plt32 = elf.R_390_PLT32,
        plt32dbl = elf.R_390_PLT32DBL,
        plt64 = elf.R_390_PLT64,
        pltoff16 = elf.R_390_PLTOFF16,
        pltoff32 = elf.R_390_PLTOFF32,
        pltoff64 = elf.R_390_PLTOFF64,
        relative = elf.R_390_RELATIVE,
        tls_dtpmod = elf.R_390_TLS_DTPMOD,
        tls_dtpoff = elf.R_390_TLS_DTPOFF,
        tls_gd32 = elf.R_390_TLS_GD32,
        tls_gd64 = elf.R_390_TLS_GD64,
        tls_gdcall = elf.R_390_TLS_GDCALL,
        tls_gotie12 = elf.R_390_TLS_GOTIE12,
        tls_gotie20 = elf.R_390_TLS_GOTIE20,
        tls_gotie32 = elf.R_390_TLS_GOTIE32,
        tls_gotie64 = elf.R_390_TLS_GOTIE64,
        tls_ie32 = elf.R_390_TLS_IE32,
        tls_ie64 = elf.R_390_TLS_IE64,
        tls_ieent = elf.R_390_TLS_IEENT,
        tls_ldcall = elf.R_390_TLS_LDCALL,
        tls_ldm32 = elf.R_390_TLS_LDM32,
        tls_ldm64 = elf.R_390_TLS_LDM64,
        tls_ldo32 = elf.R_390_TLS_LDO32,
        tls_ldo64 = elf.R_390_TLS_LDO64,
        tls_le32 = elf.R_390_TLS_LE32,
        tls_le64 = elf.R_390_TLS_LE64,
        tls_load = elf.R_390_TLS_LOAD,
        tls_tpoff = elf.R_390_TLS_TPOFF,
    };

    pub const @"68K" = enum(u16) {
        @"16" = elf.R_68K_16,
        @"32" = elf.R_68K_32,
        @"8" = elf.R_68K_8,
        copy = elf.R_68K_COPY,
        glob_dat = elf.R_68K_GLOB_DAT,
        got16 = elf.R_68K_GOT16,
        got16o = elf.R_68K_GOT16O,
        got32 = elf.R_68K_GOT32,
        got32o = elf.R_68K_GOT32O,
        got8 = elf.R_68K_GOT8,
        got8o = elf.R_68K_GOT8O,
        jmp_slot = elf.R_68K_JMP_SLOT,
        none = elf.R_68K_NONE,
        num = elf.R_68K_NUM,
        pc16 = elf.R_68K_PC16,
        pc32 = elf.R_68K_PC32,
        pc8 = elf.R_68K_PC8,
        plt16 = elf.R_68K_PLT16,
        plt16o = elf.R_68K_PLT16O,
        plt32 = elf.R_68K_PLT32,
        plt32o = elf.R_68K_PLT32O,
        plt8 = elf.R_68K_PLT8,
        plt8o = elf.R_68K_PLT8O,
        relative = elf.R_68K_RELATIVE,
        tls_dtpmod32 = elf.R_68K_TLS_DTPMOD32,
        tls_dtprel32 = elf.R_68K_TLS_DTPREL32,
        tls_gd16 = elf.R_68K_TLS_GD16,
        tls_gd32 = elf.R_68K_TLS_GD32,
        tls_gd8 = elf.R_68K_TLS_GD8,
        tls_ie16 = elf.R_68K_TLS_IE16,
        tls_ie32 = elf.R_68K_TLS_IE32,
        tls_ie8 = elf.R_68K_TLS_IE8,
        tls_ldm16 = elf.R_68K_TLS_LDM16,
        tls_ldm32 = elf.R_68K_TLS_LDM32,
        tls_ldm8 = elf.R_68K_TLS_LDM8,
        tls_ldo16 = elf.R_68K_TLS_LDO16,
        tls_ldo32 = elf.R_68K_TLS_LDO32,
        tls_ldo8 = elf.R_68K_TLS_LDO8,
        tls_le16 = elf.R_68K_TLS_LE16,
        tls_le32 = elf.R_68K_TLS_LE32,
        tls_le8 = elf.R_68K_TLS_LE8,
        tls_tprel32 = elf.R_68K_TLS_TPREL32,
    };

    pub const Aarch64 = enum(u16) {
        abs16 = elf.R_AARCH64_ABS16,
        abs32 = elf.R_AARCH64_ABS32,
        abs64 = elf.R_AARCH64_ABS64,
        add_abs_lo12_nc = elf.R_AARCH64_ADD_ABS_LO12_NC,
        adr_got_page = elf.R_AARCH64_ADR_GOT_PAGE,
        adr_prel_lo21 = elf.R_AARCH64_ADR_PREL_LO21,
        adr_prel_pg_hi21 = elf.R_AARCH64_ADR_PREL_PG_HI21,
        adr_prel_pg_hi21_nc = elf.R_AARCH64_ADR_PREL_PG_HI21_NC,
        call26 = elf.R_AARCH64_CALL26,
        condbr19 = elf.R_AARCH64_CONDBR19,
        copy = elf.R_AARCH64_COPY,
        glob_dat = elf.R_AARCH64_GLOB_DAT,
        gotrel32 = elf.R_AARCH64_GOTREL32,
        gotrel64 = elf.R_AARCH64_GOTREL64,
        got_ld_prel19 = elf.R_AARCH64_GOT_LD_PREL19,
        irelative = elf.R_AARCH64_IRELATIVE,
        jump26 = elf.R_AARCH64_JUMP26,
        jump_slot = elf.R_AARCH64_JUMP_SLOT,
        ld64_gotoff_lo15 = elf.R_AARCH64_LD64_GOTOFF_LO15,
        ld64_gotpage_lo15 = elf.R_AARCH64_LD64_GOTPAGE_LO15,
        ld64_got_lo12_nc = elf.R_AARCH64_LD64_GOT_LO12_NC,
        ldst128_abs_lo12_nc = elf.R_AARCH64_LDST128_ABS_LO12_NC,
        ldst16_abs_lo12_nc = elf.R_AARCH64_LDST16_ABS_LO12_NC,
        ldst32_abs_lo12_nc = elf.R_AARCH64_LDST32_ABS_LO12_NC,
        ldst64_abs_lo12_nc = elf.R_AARCH64_LDST64_ABS_LO12_NC,
        ldst8_abs_lo12_nc = elf.R_AARCH64_LDST8_ABS_LO12_NC,
        ld_prel_lo19 = elf.R_AARCH64_LD_PREL_LO19,
        movw_gotoff_g0 = elf.R_AARCH64_MOVW_GOTOFF_G0,
        movw_gotoff_g0_nc = elf.R_AARCH64_MOVW_GOTOFF_G0_NC,
        movw_gotoff_g1 = elf.R_AARCH64_MOVW_GOTOFF_G1,
        movw_gotoff_g1_nc = elf.R_AARCH64_MOVW_GOTOFF_G1_NC,
        movw_gotoff_g2 = elf.R_AARCH64_MOVW_GOTOFF_G2,
        movw_gotoff_g2_nc = elf.R_AARCH64_MOVW_GOTOFF_G2_NC,
        movw_gotoff_g3 = elf.R_AARCH64_MOVW_GOTOFF_G3,
        movw_prel_g0 = elf.R_AARCH64_MOVW_PREL_G0,
        movw_prel_g0_nc = elf.R_AARCH64_MOVW_PREL_G0_NC,
        movw_prel_g1 = elf.R_AARCH64_MOVW_PREL_G1,
        movw_prel_g1_nc = elf.R_AARCH64_MOVW_PREL_G1_NC,
        movw_prel_g2 = elf.R_AARCH64_MOVW_PREL_G2,
        movw_prel_g2_nc = elf.R_AARCH64_MOVW_PREL_G2_NC,
        movw_prel_g3 = elf.R_AARCH64_MOVW_PREL_G3,
        movw_sabs_g0 = elf.R_AARCH64_MOVW_SABS_G0,
        movw_sabs_g1 = elf.R_AARCH64_MOVW_SABS_G1,
        movw_sabs_g2 = elf.R_AARCH64_MOVW_SABS_G2,
        movw_uabs_g0 = elf.R_AARCH64_MOVW_UABS_G0,
        movw_uabs_g0_nc = elf.R_AARCH64_MOVW_UABS_G0_NC,
        movw_uabs_g1 = elf.R_AARCH64_MOVW_UABS_G1,
        movw_uabs_g1_nc = elf.R_AARCH64_MOVW_UABS_G1_NC,
        movw_uabs_g2 = elf.R_AARCH64_MOVW_UABS_G2,
        movw_uabs_g2_nc = elf.R_AARCH64_MOVW_UABS_G2_NC,
        movw_uabs_g3 = elf.R_AARCH64_MOVW_UABS_G3,
        none = elf.R_AARCH64_NONE,
        p32_abs32 = elf.R_AARCH64_P32_ABS32,
        p32_copy = elf.R_AARCH64_P32_COPY,
        p32_glob_dat = elf.R_AARCH64_P32_GLOB_DAT,
        p32_irelative = elf.R_AARCH64_P32_IRELATIVE,
        p32_jump_slot = elf.R_AARCH64_P32_JUMP_SLOT,
        p32_relative = elf.R_AARCH64_P32_RELATIVE,
        p32_tlsdesc = elf.R_AARCH64_P32_TLSDESC,
        p32_tls_dtpmod = elf.R_AARCH64_P32_TLS_DTPMOD,
        p32_tls_dtprel = elf.R_AARCH64_P32_TLS_DTPREL,
        p32_tls_tprel = elf.R_AARCH64_P32_TLS_TPREL,
        prel16 = elf.R_AARCH64_PREL16,
        prel32 = elf.R_AARCH64_PREL32,
        prel64 = elf.R_AARCH64_PREL64,
        relative = elf.R_AARCH64_RELATIVE,
        tlsdesc = elf.R_AARCH64_TLSDESC,
        tlsdesc_add = elf.R_AARCH64_TLSDESC_ADD,
        tlsdesc_add_lo12 = elf.R_AARCH64_TLSDESC_ADD_LO12,
        tlsdesc_adr_page21 = elf.R_AARCH64_TLSDESC_ADR_PAGE21,
        tlsdesc_adr_prel21 = elf.R_AARCH64_TLSDESC_ADR_PREL21,
        tlsdesc_call = elf.R_AARCH64_TLSDESC_CALL,
        tlsdesc_ld64_lo12 = elf.R_AARCH64_TLSDESC_LD64_LO12,
        tlsdesc_ldr = elf.R_AARCH64_TLSDESC_LDR,
        tlsdesc_ld_prel19 = elf.R_AARCH64_TLSDESC_LD_PREL19,
        tlsdesc_off_g0_nc = elf.R_AARCH64_TLSDESC_OFF_G0_NC,
        tlsdesc_off_g1 = elf.R_AARCH64_TLSDESC_OFF_G1,
        tlsgd_add_lo12_nc = elf.R_AARCH64_TLSGD_ADD_LO12_NC,
        tlsgd_adr_page21 = elf.R_AARCH64_TLSGD_ADR_PAGE21,
        tlsgd_adr_prel21 = elf.R_AARCH64_TLSGD_ADR_PREL21,
        tlsgd_movw_g0_nc = elf.R_AARCH64_TLSGD_MOVW_G0_NC,
        tlsgd_movw_g1 = elf.R_AARCH64_TLSGD_MOVW_G1,
        tlsie_adr_gottprel_page21 = elf.R_AARCH64_TLSIE_ADR_GOTTPREL_PAGE21,
        tlsie_ld64_gottprel_lo12_nc = elf.R_AARCH64_TLSIE_LD64_GOTTPREL_LO12_NC,
        tlsie_ld_gottprel_prel19 = elf.R_AARCH64_TLSIE_LD_GOTTPREL_PREL19,
        tlsie_movw_gottprel_g0_nc = elf.R_AARCH64_TLSIE_MOVW_GOTTPREL_G0_NC,
        tlsie_movw_gottprel_g1 = elf.R_AARCH64_TLSIE_MOVW_GOTTPREL_G1,
        tlsld_add_dtprel_hi12 = elf.R_AARCH64_TLSLD_ADD_DTPREL_HI12,
        tlsld_add_dtprel_lo12 = elf.R_AARCH64_TLSLD_ADD_DTPREL_LO12,
        tlsld_add_dtprel_lo12_nc = elf.R_AARCH64_TLSLD_ADD_DTPREL_LO12_NC,
        tlsld_add_lo12_nc = elf.R_AARCH64_TLSLD_ADD_LO12_NC,
        tlsld_adr_page21 = elf.R_AARCH64_TLSLD_ADR_PAGE21,
        tlsld_adr_prel21 = elf.R_AARCH64_TLSLD_ADR_PREL21,
        tlsld_ldst128_dtprel_lo12 = elf.R_AARCH64_TLSLD_LDST128_DTPREL_LO12,
        tlsld_ldst128_dtprel_lo12_nc = elf.R_AARCH64_TLSLD_LDST128_DTPREL_LO12_NC,
        tlsld_ldst16_dtprel_lo12 = elf.R_AARCH64_TLSLD_LDST16_DTPREL_LO12,
        tlsld_ldst16_dtprel_lo12_nc = elf.R_AARCH64_TLSLD_LDST16_DTPREL_LO12_NC,
        tlsld_ldst32_dtprel_lo12 = elf.R_AARCH64_TLSLD_LDST32_DTPREL_LO12,
        tlsld_ldst32_dtprel_lo12_nc = elf.R_AARCH64_TLSLD_LDST32_DTPREL_LO12_NC,
        tlsld_ldst64_dtprel_lo12 = elf.R_AARCH64_TLSLD_LDST64_DTPREL_LO12,
        tlsld_ldst64_dtprel_lo12_nc = elf.R_AARCH64_TLSLD_LDST64_DTPREL_LO12_NC,
        tlsld_ldst8_dtprel_lo12 = elf.R_AARCH64_TLSLD_LDST8_DTPREL_LO12,
        tlsld_ldst8_dtprel_lo12_nc = elf.R_AARCH64_TLSLD_LDST8_DTPREL_LO12_NC,
        tlsld_ld_prel19 = elf.R_AARCH64_TLSLD_LD_PREL19,
        tlsld_movw_dtprel_g0 = elf.R_AARCH64_TLSLD_MOVW_DTPREL_G0,
        tlsld_movw_dtprel_g0_nc = elf.R_AARCH64_TLSLD_MOVW_DTPREL_G0_NC,
        tlsld_movw_dtprel_g1 = elf.R_AARCH64_TLSLD_MOVW_DTPREL_G1,
        tlsld_movw_dtprel_g1_nc = elf.R_AARCH64_TLSLD_MOVW_DTPREL_G1_NC,
        tlsld_movw_dtprel_g2 = elf.R_AARCH64_TLSLD_MOVW_DTPREL_G2,
        tlsld_movw_g0_nc = elf.R_AARCH64_TLSLD_MOVW_G0_NC,
        tlsld_movw_g1 = elf.R_AARCH64_TLSLD_MOVW_G1,
        tlsle_add_tprel_hi12 = elf.R_AARCH64_TLSLE_ADD_TPREL_HI12,
        tlsle_add_tprel_lo12 = elf.R_AARCH64_TLSLE_ADD_TPREL_LO12,
        tlsle_add_tprel_lo12_nc = elf.R_AARCH64_TLSLE_ADD_TPREL_LO12_NC,
        tlsle_ldst128_tprel_lo12 = elf.R_AARCH64_TLSLE_LDST128_TPREL_LO12,
        tlsle_ldst128_tprel_lo12_nc = elf.R_AARCH64_TLSLE_LDST128_TPREL_LO12_NC,
        tlsle_ldst16_tprel_lo12 = elf.R_AARCH64_TLSLE_LDST16_TPREL_LO12,
        tlsle_ldst16_tprel_lo12_nc = elf.R_AARCH64_TLSLE_LDST16_TPREL_LO12_NC,
        tlsle_ldst32_tprel_lo12 = elf.R_AARCH64_TLSLE_LDST32_TPREL_LO12,
        tlsle_ldst32_tprel_lo12_nc = elf.R_AARCH64_TLSLE_LDST32_TPREL_LO12_NC,
        tlsle_ldst64_tprel_lo12 = elf.R_AARCH64_TLSLE_LDST64_TPREL_LO12,
        tlsle_ldst64_tprel_lo12_nc = elf.R_AARCH64_TLSLE_LDST64_TPREL_LO12_NC,
        tlsle_ldst8_tprel_lo12 = elf.R_AARCH64_TLSLE_LDST8_TPREL_LO12,
        tlsle_ldst8_tprel_lo12_nc = elf.R_AARCH64_TLSLE_LDST8_TPREL_LO12_NC,
        tlsle_movw_tprel_g0 = elf.R_AARCH64_TLSLE_MOVW_TPREL_G0,
        tlsle_movw_tprel_g0_nc = elf.R_AARCH64_TLSLE_MOVW_TPREL_G0_NC,
        tlsle_movw_tprel_g1 = elf.R_AARCH64_TLSLE_MOVW_TPREL_G1,
        tlsle_movw_tprel_g1_nc = elf.R_AARCH64_TLSLE_MOVW_TPREL_G1_NC,
        tlsle_movw_tprel_g2 = elf.R_AARCH64_TLSLE_MOVW_TPREL_G2,
        tls_dtpmod = elf.R_AARCH64_TLS_DTPMOD,
        tls_dtprel = elf.R_AARCH64_TLS_DTPREL,
        tls_tprel = elf.R_AARCH64_TLS_TPREL,
        tstbr14 = elf.R_AARCH64_TSTBR14,
    };

    pub const Ac = enum(u8) {
        sectoff_s9 = elf.R_AC_SECTOFF_S9,
        sectoff_s9_1 = elf.R_AC_SECTOFF_S9_1,
        sectoff_s9_2 = elf.R_AC_SECTOFF_S9_2,
        sectoff_u8 = elf.R_AC_SECTOFF_U8,
        sectoff_u8_1 = elf.R_AC_SECTOFF_U8_1,
        sectoff_u8_2 = elf.R_AC_SECTOFF_U8_2,
    };

    pub const Alpha = enum(u8) {
        braddr = elf.R_ALPHA_BRADDR,
        copy = elf.R_ALPHA_COPY,
        dtpmod64 = elf.R_ALPHA_DTPMOD64,
        dtprel16 = elf.R_ALPHA_DTPREL16,
        dtprel64 = elf.R_ALPHA_DTPREL64,
        dtprelhi = elf.R_ALPHA_DTPRELHI,
        dtprello = elf.R_ALPHA_DTPRELLO,
        glob_dat = elf.R_ALPHA_GLOB_DAT,
        gotdtprel = elf.R_ALPHA_GOTDTPREL,
        gottprel = elf.R_ALPHA_GOTTPREL,
        gpdisp = elf.R_ALPHA_GPDISP,
        gprel16 = elf.R_ALPHA_GPREL16,
        gprel32 = elf.R_ALPHA_GPREL32,
        gprelhigh = elf.R_ALPHA_GPRELHIGH,
        gprellow = elf.R_ALPHA_GPRELLOW,
        hint = elf.R_ALPHA_HINT,
        jmp_slot = elf.R_ALPHA_JMP_SLOT,
        literal = elf.R_ALPHA_LITERAL,
        lituse = elf.R_ALPHA_LITUSE,
        none = elf.R_ALPHA_NONE,
        num = elf.R_ALPHA_NUM,
        reflong = elf.R_ALPHA_REFLONG,
        refquad = elf.R_ALPHA_REFQUAD,
        relative = elf.R_ALPHA_RELATIVE,
        srel16 = elf.R_ALPHA_SREL16,
        srel32 = elf.R_ALPHA_SREL32,
        srel64 = elf.R_ALPHA_SREL64,
        tlsgd = elf.R_ALPHA_TLSGD,
        tls_gd_hi = elf.R_ALPHA_TLS_GD_HI,
        tls_ldm = elf.R_ALPHA_TLS_LDM,
        tprel16 = elf.R_ALPHA_TPREL16,
        tprel64 = elf.R_ALPHA_TPREL64,
        tprelhi = elf.R_ALPHA_TPRELHI,
        R_ALPHA_TPRELLO = elf.R_ALPHA_TPRELLO,
    };

    pub const Arc = enum(u16) {
        @"16" = elf.R_ARC_16,
        @"24" = elf.R_ARC_24,
        @"32" = elf.R_ARC_32,
        @"32_me" = elf.R_ARC_32_ME,
        @"32_pcrel" = elf.R_ARC_32_PCREL,
        @"8" = elf.R_ARC_8,
        b22_pcrel = elf.R_ARC_B22_PCREL,
        copy = elf.R_ARC_COPY,
        glob_dat = elf.R_ARC_GLOB_DAT,
        got32 = elf.R_ARC_GOT32,
        gotoff = elf.R_ARC_GOTOFF,
        gotpc = elf.R_ARC_GOTPC,
        gotpc32 = elf.R_ARC_GOTPC32,
        h30 = elf.R_ARC_H30,
        h30_me = elf.R_ARC_H30_ME,
        jli_sectoff = elf.R_ARC_JLI_SECTOFF,
        jmp_slot = elf.R_ARC_JMP_SLOT,
        n16 = elf.R_ARC_N16,
        n24 = elf.R_ARC_N24,
        n32 = elf.R_ARC_N32,
        n32_me = elf.R_ARC_N32_ME,
        n8 = elf.R_ARC_N8,
        none = elf.R_ARC_NONE,
        nps_cmem16 = elf.R_ARC_NPS_CMEM16,
        pc32 = elf.R_ARC_PC32,
        plt32 = elf.R_ARC_PLT32,
        relative = elf.R_ARC_RELATIVE,
        s13_pcrel = elf.R_ARC_S13_PCREL,
        s21h_pcrel = elf.R_ARC_S21H_PCREL,
        s21h_pcrel_plt = elf.R_ARC_S21H_PCREL_PLT,
        s21w_pcrel = elf.R_ARC_S21W_PCREL,
        s21w_pcrel_plt = elf.R_ARC_S21W_PCREL_PLT,
        s25h_pcrel = elf.R_ARC_S25H_PCREL,
        s25h_pcrel_plt = elf.R_ARC_S25H_PCREL_PLT,
        s25w_pcrel = elf.R_ARC_S25W_PCREL,
        s25w_pcrel_plt = elf.R_ARC_S25W_PCREL_PLT,
        sda = elf.R_ARC_SDA,
        sda16_ld = elf.R_ARC_SDA16_LD,
        sda16_ld1 = elf.R_ARC_SDA16_LD1,
        sda16_ld2 = elf.R_ARC_SDA16_LD2,
        sda16_st2 = elf.R_ARC_SDA16_ST2,
        sda32 = elf.R_ARC_SDA32,
        sda32_me = elf.R_ARC_SDA32_ME,
        sda_12 = elf.R_ARC_SDA_12,
        sda_ldst = elf.R_ARC_SDA_LDST,
        sda_ldst1 = elf.R_ARC_SDA_LDST1,
        sda_ldst2 = elf.R_ARC_SDA_LDST2,
        sectoff = elf.R_ARC_SECTOFF,
        sectoff_1 = elf.R_ARC_SECTOFF_1,
        sectoff_2 = elf.R_ARC_SECTOFF_2,
        sectoff_me = elf.R_ARC_SECTOFF_ME,
        sectoff_me_1 = elf.R_ARC_SECTOFF_ME_1,
        sectoff_me_2 = elf.R_ARC_SECTOFF_ME_2,
        sectoff_s9 = elf.R_ARC_SECTOFF_S9,
        sectoff_u8 = elf.R_ARC_SECTOFF_U8,
        tls_dtpmod = elf.R_ARC_TLS_DTPMOD,
        tls_dtpoff = elf.R_ARC_TLS_DTPOFF,
        tls_dtpoff_s9 = elf.R_ARC_TLS_DTPOFF_S9,
        tls_gd_call = elf.R_ARC_TLS_GD_CALL,
        tls_gd_got = elf.R_ARC_TLS_GD_GOT,
        tls_gd_ld = elf.R_ARC_TLS_GD_LD,
        tls_ie_got = elf.R_ARC_TLS_IE_GOT,
        tls_le_32 = elf.R_ARC_TLS_LE_32,
        tls_le_s9 = elf.R_ARC_TLS_LE_S9,
        tls_tpoff = elf.R_ARC_TLS_TPOFF,
        w = elf.R_ARC_W,
        w_me = elf.R_ARC_W_ME,
    };

    pub const Arm = enum(u16) {
        abs12 = elf.R_ARM_ABS12,
        abs16 = elf.R_ARM_ABS16,
        abs32 = elf.R_ARM_ABS32,
        abs32_noi = elf.R_ARM_ABS32_NOI,
        abs8 = elf.R_ARM_ABS8,
        alu_pcrel_15_8 = elf.R_ARM_ALU_PCREL_15_8,
        alu_pcrel_23_15 = elf.R_ARM_ALU_PCREL_23_15,
        alu_pcrel_7_0 = elf.R_ARM_ALU_PCREL_7_0,
        alu_pc_g0 = elf.R_ARM_ALU_PC_G0,
        alu_pc_g0_nc = elf.R_ARM_ALU_PC_G0_NC,
        alu_pc_g1 = elf.R_ARM_ALU_PC_G1,
        alu_pc_g1_nc = elf.R_ARM_ALU_PC_G1_NC,
        alu_pc_g2 = elf.R_ARM_ALU_PC_G2,
        alu_sbrel_19_12 = elf.R_ARM_ALU_SBREL_19_12,
        alu_sbrel_27_20 = elf.R_ARM_ALU_SBREL_27_20,
        alu_sb_g0 = elf.R_ARM_ALU_SB_G0,
        alu_sb_g0_nc = elf.R_ARM_ALU_SB_G0_NC,
        alu_sb_g1 = elf.R_ARM_ALU_SB_G1,
        alu_sb_g1_nc = elf.R_ARM_ALU_SB_G1_NC,
        alu_sb_g2 = elf.R_ARM_ALU_SB_G2,
        amp_vcall9 = elf.R_ARM_AMP_VCALL9,
        base_abs = elf.R_ARM_BASE_ABS,
        call = elf.R_ARM_CALL,
        copy = elf.R_ARM_COPY,
        glob_dat = elf.R_ARM_GLOB_DAT,
        gnu_vtentry = elf.R_ARM_GNU_VTENTRY,
        gnu_vtinherit = elf.R_ARM_GNU_VTINHERIT,
        got32 = elf.R_ARM_GOT32,
        gotoff = elf.R_ARM_GOTOFF,
        gotoff12 = elf.R_ARM_GOTOFF12,
        gotpc = elf.R_ARM_GOTPC,
        gotrelax = elf.R_ARM_GOTRELAX,
        got_abs = elf.R_ARM_GOT_ABS,
        got_brel12 = elf.R_ARM_GOT_BREL12,
        got_prel = elf.R_ARM_GOT_PREL,
        irelative = elf.R_ARM_IRELATIVE,
        jump24 = elf.R_ARM_JUMP24,
        jump_slot = elf.R_ARM_JUMP_SLOT,
        ldc_pc_g0 = elf.R_ARM_LDC_PC_G0,
        ldc_pc_g1 = elf.R_ARM_LDC_PC_G1,
        ldc_pc_g2 = elf.R_ARM_LDC_PC_G2,
        ldc_sb_g0 = elf.R_ARM_LDC_SB_G0,
        ldc_sb_g1 = elf.R_ARM_LDC_SB_G1,
        ldc_sb_g2 = elf.R_ARM_LDC_SB_G2,
        ldrs_pc_g0 = elf.R_ARM_LDRS_PC_G0,
        ldrs_pc_g1 = elf.R_ARM_LDRS_PC_G1,
        ldrs_pc_g2 = elf.R_ARM_LDRS_PC_G2,
        ldrs_sb_g0 = elf.R_ARM_LDRS_SB_G0,
        ldrs_sb_g1 = elf.R_ARM_LDRS_SB_G1,
        ldrs_sb_g2 = elf.R_ARM_LDRS_SB_G2,
        ldr_pc_g1 = elf.R_ARM_LDR_PC_G1,
        ldr_pc_g2 = elf.R_ARM_LDR_PC_G2,
        ldr_sbrel_11_0 = elf.R_ARM_LDR_SBREL_11_0,
        ldr_sb_g0 = elf.R_ARM_LDR_SB_G0,
        ldr_sb_g1 = elf.R_ARM_LDR_SB_G1,
        ldr_sb_g2 = elf.R_ARM_LDR_SB_G2,
        me_too = elf.R_ARM_ME_TOO,
        movt_abs = elf.R_ARM_MOVT_ABS,
        movt_brel = elf.R_ARM_MOVT_BREL,
        movt_prel = elf.R_ARM_MOVT_PREL,
        movw_abs_nc = elf.R_ARM_MOVW_ABS_NC,
        movw_brel = elf.R_ARM_MOVW_BREL,
        movw_brel_nc = elf.R_ARM_MOVW_BREL_NC,
        movw_prel_nc = elf.R_ARM_MOVW_PREL_NC,
        none = elf.R_ARM_NONE,
        num = elf.R_ARM_NUM,
        pc13 = elf.R_ARM_PC13,
        pc24 = elf.R_ARM_PC24,
        plt32 = elf.R_ARM_PLT32,
        plt32_abs = elf.R_ARM_PLT32_ABS,
        prel31 = elf.R_ARM_PREL31,
        rabs22 = elf.R_ARM_RABS22,
        rbase = elf.R_ARM_RBASE,
        rel32 = elf.R_ARM_REL32,
        rel32_noi = elf.R_ARM_REL32_NOI,
        relative = elf.R_ARM_RELATIVE,
        rpc24 = elf.R_ARM_RPC24,
        rrel32 = elf.R_ARM_RREL32,
        rsbrel32 = elf.R_ARM_RSBREL32,
        rxpc25 = elf.R_ARM_RXPC25,
        sbrel31 = elf.R_ARM_SBREL31,
        sbrel32 = elf.R_ARM_SBREL32,
        swi24 = elf.R_ARM_SWI24,
        target1 = elf.R_ARM_TARGET1,
        target2 = elf.R_ARM_TARGET2,
        thm_abs5 = elf.R_ARM_THM_ABS5,
        thm_alu_prel_11_0 = elf.R_ARM_THM_ALU_PREL_11_0,
        thm_got_brel12 = elf.R_ARM_THM_GOT_BREL12,
        thm_jump19 = elf.R_ARM_THM_JUMP19,
        thm_jump24 = elf.R_ARM_THM_JUMP24,
        thm_jump6 = elf.R_ARM_THM_JUMP6,
        thm_movt_abs = elf.R_ARM_THM_MOVT_ABS,
        thm_movt_brel = elf.R_ARM_THM_MOVT_BREL,
        thm_movt_prel = elf.R_ARM_THM_MOVT_PREL,
        thm_movw_abs_nc = elf.R_ARM_THM_MOVW_ABS_NC,
        thm_movw_brel = elf.R_ARM_THM_MOVW_BREL,
        thm_movw_brel_nc = elf.R_ARM_THM_MOVW_BREL_NC,
        thm_movw_prel_nc = elf.R_ARM_THM_MOVW_PREL_NC,
        thm_pc11 = elf.R_ARM_THM_PC11,
        thm_pc12 = elf.R_ARM_THM_PC12,
        thm_pc22 = elf.R_ARM_THM_PC22,
        thm_pc8 = elf.R_ARM_THM_PC8,
        thm_pc9 = elf.R_ARM_THM_PC9,
        thm_rpc22 = elf.R_ARM_THM_RPC22,
        thm_swi8 = elf.R_ARM_THM_SWI8,
        thm_tls_call = elf.R_ARM_THM_TLS_CALL,
        thm_tls_descseq = elf.R_ARM_THM_TLS_DESCSEQ,
        thm_tls_descseq16 = elf.R_ARM_THM_TLS_DESCSEQ16,
        thm_tls_descseq32 = elf.R_ARM_THM_TLS_DESCSEQ32,
        thm_xpc22 = elf.R_ARM_THM_XPC22,
        tls_call = elf.R_ARM_TLS_CALL,
        tls_desc = elf.R_ARM_TLS_DESC,
        tls_descseq = elf.R_ARM_TLS_DESCSEQ,
        tls_dtpmod32 = elf.R_ARM_TLS_DTPMOD32,
        tls_dtpoff32 = elf.R_ARM_TLS_DTPOFF32,
        tls_gd32 = elf.R_ARM_TLS_GD32,
        tls_gotdesc = elf.R_ARM_TLS_GOTDESC,
        tls_ie12gp = elf.R_ARM_TLS_IE12GP,
        tls_ie32 = elf.R_ARM_TLS_IE32,
        tls_ldm32 = elf.R_ARM_TLS_LDM32,
        tls_ldo12 = elf.R_ARM_TLS_LDO12,
        tls_ldo32 = elf.R_ARM_TLS_LDO32,
        tls_le12 = elf.R_ARM_TLS_LE12,
        tls_le32 = elf.R_ARM_TLS_LE32,
        tls_tpoff32 = elf.R_ARM_TLS_TPOFF32,
        v4bx = elf.R_ARM_V4BX,
        xpc25 = elf.R_ARM_XPC25,
    };

    pub const Bpf = enum(u8) {
        @"64_32" = elf.R_BPF_64_32,
        @"64_64" = elf.R_BPF_64_64,
        none = elf.R_BPF_NONE,
    };

    pub const Ckcore = enum(u16) {
        addr32 = elf.R_CKCORE_ADDR32,
        addrgot = elf.R_CKCORE_ADDRGOT,
        addrgot_hi16 = elf.R_CKCORE_ADDRGOT_HI16,
        addrgot_lo16 = elf.R_CKCORE_ADDRGOT_LO16,
        addrplt = elf.R_CKCORE_ADDRPLT,
        addrplt_hi16 = elf.R_CKCORE_ADDRPLT_HI16,
        addrplt_lo16 = elf.R_CKCORE_ADDRPLT_LO16,
        addr_hi16 = elf.R_CKCORE_ADDR_HI16,
        addr_lo16 = elf.R_CKCORE_ADDR_LO16,
        copy = elf.R_CKCORE_COPY,
        doffset_imm18 = elf.R_CKCORE_DOFFSET_IMM18,
        doffset_imm18by2 = elf.R_CKCORE_DOFFSET_IMM18BY2,
        doffset_imm18by4 = elf.R_CKCORE_DOFFSET_IMM18BY4,
        doffset_lo16 = elf.R_CKCORE_DOFFSET_LO16,
        glob_dat = elf.R_CKCORE_GLOB_DAT,
        got12 = elf.R_CKCORE_GOT12,
        got32 = elf.R_CKCORE_GOT32,
        gotoff = elf.R_CKCORE_GOTOFF,
        gotoff_hi16 = elf.R_CKCORE_GOTOFF_HI16,
        gotoff_lo16 = elf.R_CKCORE_GOTOFF_LO16,
        gotpc = elf.R_CKCORE_GOTPC,
        gotpc_hi16 = elf.R_CKCORE_GOTPC_HI16,
        gotpc_lo16 = elf.R_CKCORE_GOTPC_LO16,
        got_hi16 = elf.R_CKCORE_GOT_HI16,
        got_imm18by4 = elf.R_CKCORE_GOT_IMM18BY4,
        got_lo16 = elf.R_CKCORE_GOT_LO16,
        jump_slot = elf.R_CKCORE_JUMP_SLOT,
        none = elf.R_CKCORE_NONE,
        pcrel32 = elf.R_CKCORE_PCREL32,
        pcrelimm11by2 = elf.R_CKCORE_PCRELIMM11BY2,
        pcrelimm8by4 = elf.R_CKCORE_PCRELIMM8BY4,
        pcreljsr_imm11by2 = elf.R_CKCORE_PCRELJSR_IMM11BY2,
        pcrel_imm10by2 = elf.R_CKCORE_PCREL_IMM10BY2,
        pcrel_imm10by4 = elf.R_CKCORE_PCREL_IMM10BY4,
        pcrel_imm16by2 = elf.R_CKCORE_PCREL_IMM16BY2,
        pcrel_imm16by4 = elf.R_CKCORE_PCREL_IMM16BY4,
        pcrel_imm18by2 = elf.R_CKCORE_PCREL_IMM18BY2,
        pcrel_imm26by2 = elf.R_CKCORE_PCREL_IMM26BY2,
        pcrel_imm7by4 = elf.R_CKCORE_PCREL_IMM7BY4,
        pcrel_jsr_imm26by2 = elf.R_CKCORE_PCREL_JSR_IMM26BY2,
        plt12 = elf.R_CKCORE_PLT12,
        plt32 = elf.R_CKCORE_PLT32,
        plt_hi16 = elf.R_CKCORE_PLT_HI16,
        plt_imm18by4 = elf.R_CKCORE_PLT_IMM18BY4,
        plt_lo16 = elf.R_CKCORE_PLT_LO16,
        relative = elf.R_CKCORE_RELATIVE,
        tls_dtpmod32 = elf.R_CKCORE_TLS_DTPMOD32,
        tls_dtpoff32 = elf.R_CKCORE_TLS_DTPOFF32,
        tls_gd32 = elf.R_CKCORE_TLS_GD32,
        tls_ie32 = elf.R_CKCORE_TLS_IE32,
        tls_ldm32 = elf.R_CKCORE_TLS_LDM32,
        tls_ldo32 = elf.R_CKCORE_TLS_LDO32,
        tls_le32 = elf.R_CKCORE_TLS_LE32,
        tls_tpoff32 = elf.R_CKCORE_TLS_TPOFF32,
        toffset_lo16 = elf.R_CKCORE_TOFFSET_LO16,
    };

    pub const Cris = enum(u16) {
        @"16" = elf.R_CRIS_16,
        @"16_got" = elf.R_CRIS_16_GOT,
        @"16_gotplt" = elf.R_CRIS_16_GOTPLT,
        @"16_pcrel" = elf.R_CRIS_16_PCREL,
        @"32" = elf.R_CRIS_32,
        @"32_got" = elf.R_CRIS_32_GOT,
        @"32_gotplt" = elf.R_CRIS_32_GOTPLT,
        @"32_gotrel" = elf.R_CRIS_32_GOTREL,
        @"32_pcrel" = elf.R_CRIS_32_PCREL,
        @"32_plt_gotrel" = elf.R_CRIS_32_PLT_GOTREL,
        @"32_plt_pcrel" = elf.R_CRIS_32_PLT_PCREL,
        @"8" = elf.R_CRIS_8,
        @"8_pcrel" = elf.R_CRIS_8_PCREL,
        copy = elf.R_CRIS_COPY,
        glob_dat = elf.R_CRIS_GLOB_DAT,
        gnu_vtentry = elf.R_CRIS_GNU_VTENTRY,
        gnu_vtinherit = elf.R_CRIS_GNU_VTINHERIT,
        jump_slot = elf.R_CRIS_JUMP_SLOT,
        none = elf.R_CRIS_NONE,
        num = elf.R_CRIS_NUM,
        relative = elf.R_CRIS_RELATIVE,
    };

    pub const I64 = enum(u16) {
        copy = elf.R_IA64_COPY,
        dir32lsb = elf.R_IA64_DIR32LSB,
        dir32msb = elf.R_IA64_DIR32MSB,
        dir64lsb = elf.R_IA64_DIR64LSB,
        dir64msb = elf.R_IA64_DIR64MSB,
        dtpmod64lsb = elf.R_IA64_DTPMOD64LSB,
        dtpmod64msb = elf.R_IA64_DTPMOD64MSB,
        dtprel14 = elf.R_IA64_DTPREL14,
        dtprel22 = elf.R_IA64_DTPREL22,
        dtprel32lsb = elf.R_IA64_DTPREL32LSB,
        dtprel32msb = elf.R_IA64_DTPREL32MSB,
        dtprel64i = elf.R_IA64_DTPREL64I,
        dtprel64lsb = elf.R_IA64_DTPREL64LSB,
        dtprel64msb = elf.R_IA64_DTPREL64MSB,
        fptr32lsb = elf.R_IA64_FPTR32LSB,
        fptr32msb = elf.R_IA64_FPTR32MSB,
        fptr64i = elf.R_IA64_FPTR64I,
        fptr64lsb = elf.R_IA64_FPTR64LSB,
        fptr64msb = elf.R_IA64_FPTR64MSB,
        gprel22 = elf.R_IA64_GPREL22,
        gprel32lsb = elf.R_IA64_GPREL32LSB,
        gprel32msb = elf.R_IA64_GPREL32MSB,
        gprel64i = elf.R_IA64_GPREL64I,
        gprel64lsb = elf.R_IA64_GPREL64LSB,
        gprel64msb = elf.R_IA64_GPREL64MSB,
        imm14 = elf.R_IA64_IMM14,
        imm22 = elf.R_IA64_IMM22,
        imm64 = elf.R_IA64_IMM64,
        ipltlsb = elf.R_IA64_IPLTLSB,
        ipltmsb = elf.R_IA64_IPLTMSB,
        ldxmov = elf.R_IA64_LDXMOV,
        ltoff22 = elf.R_IA64_LTOFF22,
        ltoff22x = elf.R_IA64_LTOFF22X,
        ltoff64i = elf.R_IA64_LTOFF64I,
        ltoff_dtpmod22 = elf.R_IA64_LTOFF_DTPMOD22,
        ltoff_dtprel22 = elf.R_IA64_LTOFF_DTPREL22,
        ltoff_fptr22 = elf.R_IA64_LTOFF_FPTR22,
        ltoff_fptr32lsb = elf.R_IA64_LTOFF_FPTR32LSB,
        ltoff_fptr32msb = elf.R_IA64_LTOFF_FPTR32MSB,
        ltoff_fptr64i = elf.R_IA64_LTOFF_FPTR64I,
        ltoff_fptr64lsb = elf.R_IA64_LTOFF_FPTR64LSB,
        ltoff_fptr64msb = elf.R_IA64_LTOFF_FPTR64MSB,
        ltoff_tprel22 = elf.R_IA64_LTOFF_TPREL22,
        ltv32lsb = elf.R_IA64_LTV32LSB,
        ltv32msb = elf.R_IA64_LTV32MSB,
        ltv64lsb = elf.R_IA64_LTV64LSB,
        ltv64msb = elf.R_IA64_LTV64MSB,
        none = elf.R_IA64_NONE,
        pcrel21b = elf.R_IA64_PCREL21B,
        pcrel21bi = elf.R_IA64_PCREL21BI,
        pcrel21f = elf.R_IA64_PCREL21F,
        pcrel21m = elf.R_IA64_PCREL21M,
        pcrel22 = elf.R_IA64_PCREL22,
        pcrel32lsb = elf.R_IA64_PCREL32LSB,
        pcrel32msb = elf.R_IA64_PCREL32MSB,
        pcrel60b = elf.R_IA64_PCREL60B,
        pcrel64i = elf.R_IA64_PCREL64I,
        pcrel64lsb = elf.R_IA64_PCREL64LSB,
        pcrel64msb = elf.R_IA64_PCREL64MSB,
        pltoff22 = elf.R_IA64_PLTOFF22,
        pltoff64i = elf.R_IA64_PLTOFF64I,
        pltoff64lsb = elf.R_IA64_PLTOFF64LSB,
        pltoff64msb = elf.R_IA64_PLTOFF64MSB,
        rel32lsb = elf.R_IA64_REL32LSB,
        rel32msb = elf.R_IA64_REL32MSB,
        rel64lsb = elf.R_IA64_REL64LSB,
        rel64msb = elf.R_IA64_REL64MSB,
        secrel32lsb = elf.R_IA64_SECREL32LSB,
        secrel32msb = elf.R_IA64_SECREL32MSB,
        secrel64lsb = elf.R_IA64_SECREL64LSB,
        secrel64msb = elf.R_IA64_SECREL64MSB,
        segrel32lsb = elf.R_IA64_SEGREL32LSB,
        segrel32msb = elf.R_IA64_SEGREL32MSB,
        segrel64lsb = elf.R_IA64_SEGREL64LSB,
        segrel64msb = elf.R_IA64_SEGREL64MSB,
        sub = elf.R_IA64_SUB,
        tprel14 = elf.R_IA64_TPREL14,
        tprel22 = elf.R_IA64_TPREL22,
        tprel64i = elf.R_IA64_TPREL64I,
        tprel64lsb = elf.R_IA64_TPREL64LSB,
        tprel64msb = elf.R_IA64_TPREL64MSB,
    };

    pub const Larch = enum(u16) {
        @"32" = elf.R_LARCH_32,
        @"32_pcrel" = elf.R_LARCH_32_PCREL,
        @"64" = elf.R_LARCH_64,
        @"64_pcrel" = elf.R_LARCH_64_PCREL,
        abs64_hi12 = elf.R_LARCH_ABS64_HI12,
        abs64_lo20 = elf.R_LARCH_ABS64_LO20,
        abs_hi20 = elf.R_LARCH_ABS_HI20,
        abs_lo12 = elf.R_LARCH_ABS_LO12,
        add16 = elf.R_LARCH_ADD16,
        add24 = elf.R_LARCH_ADD24,
        add32 = elf.R_LARCH_ADD32,
        add6 = elf.R_LARCH_ADD6,
        add64 = elf.R_LARCH_ADD64,
        add8 = elf.R_LARCH_ADD8,
        add_uleb128 = elf.R_LARCH_ADD_ULEB128,
        @"align" = elf.R_LARCH_ALIGN,
        b16 = elf.R_LARCH_B16,
        b21 = elf.R_LARCH_B21,
        b26 = elf.R_LARCH_B26,
        call36 = elf.R_LARCH_CALL36,
        cfa = elf.R_LARCH_CFA,
        copy = elf.R_LARCH_COPY,
        delete = elf.R_LARCH_DELETE,
        gnu_vtentry = elf.R_LARCH_GNU_VTENTRY,
        gnu_vtinherit = elf.R_LARCH_GNU_VTINHERIT,
        got64_hi12 = elf.R_LARCH_GOT64_HI12,
        got64_lo20 = elf.R_LARCH_GOT64_LO20,
        got64_pc_hi12 = elf.R_LARCH_GOT64_PC_HI12,
        got64_pc_lo20 = elf.R_LARCH_GOT64_PC_LO20,
        got_hi20 = elf.R_LARCH_GOT_HI20,
        got_lo12 = elf.R_LARCH_GOT_LO12,
        got_pc_hi20 = elf.R_LARCH_GOT_PC_HI20,
        got_pc_lo12 = elf.R_LARCH_GOT_PC_LO12,
        irelative = elf.R_LARCH_IRELATIVE,
        jump_slot = elf.R_LARCH_JUMP_SLOT,
        mark_la = elf.R_LARCH_MARK_LA,
        mark_pcrel = elf.R_LARCH_MARK_PCREL,
        none = elf.R_LARCH_NONE,
        pcala64_hi12 = elf.R_LARCH_PCALA64_HI12,
        pcala64_lo20 = elf.R_LARCH_PCALA64_LO20,
        pcala_hi20 = elf.R_LARCH_PCALA_HI20,
        pcala_lo12 = elf.R_LARCH_PCALA_LO12,
        pcrel20_s2 = elf.R_LARCH_PCREL20_S2,
        relative = elf.R_LARCH_RELATIVE,
        relax = elf.R_LARCH_RELAX,
        sop_add = elf.R_LARCH_SOP_ADD,
        sop_and = elf.R_LARCH_SOP_AND,
        sop_assert = elf.R_LARCH_SOP_ASSERT,
        sop_if_else = elf.R_LARCH_SOP_IF_ELSE,
        sop_not = elf.R_LARCH_SOP_NOT,
        sop_pop_32_s_0_10_10_16_s2 = elf.R_LARCH_SOP_POP_32_S_0_10_10_16_S2,
        sop_pop_32_s_0_5_10_16_s2 = elf.R_LARCH_SOP_POP_32_S_0_5_10_16_S2,
        sop_pop_32_s_10_12 = elf.R_LARCH_SOP_POP_32_S_10_12,
        sop_pop_32_s_10_16 = elf.R_LARCH_SOP_POP_32_S_10_16,
        sop_pop_32_s_10_16_s2 = elf.R_LARCH_SOP_POP_32_S_10_16_S2,
        sop_pop_32_s_10_5 = elf.R_LARCH_SOP_POP_32_S_10_5,
        sop_pop_32_s_5_20 = elf.R_LARCH_SOP_POP_32_S_5_20,
        sop_pop_32_u = elf.R_LARCH_SOP_POP_32_U,
        sop_pop_32_u_10_12 = elf.R_LARCH_SOP_POP_32_U_10_12,
        sop_push_absolute = elf.R_LARCH_SOP_PUSH_ABSOLUTE,
        sop_push_dup = elf.R_LARCH_SOP_PUSH_DUP,
        sop_push_gprel = elf.R_LARCH_SOP_PUSH_GPREL,
        sop_push_pcrel = elf.R_LARCH_SOP_PUSH_PCREL,
        sop_push_plt_pcrel = elf.R_LARCH_SOP_PUSH_PLT_PCREL,
        sop_push_tls_gd = elf.R_LARCH_SOP_PUSH_TLS_GD,
        sop_push_tls_got = elf.R_LARCH_SOP_PUSH_TLS_GOT,
        sop_push_tls_tprel = elf.R_LARCH_SOP_PUSH_TLS_TPREL,
        sop_sl = elf.R_LARCH_SOP_SL,
        sop_sr = elf.R_LARCH_SOP_SR,
        sop_sub = elf.R_LARCH_SOP_SUB,
        sub16 = elf.R_LARCH_SUB16,
        sub24 = elf.R_LARCH_SUB24,
        sub32 = elf.R_LARCH_SUB32,
        sub6 = elf.R_LARCH_SUB6,
        sub64 = elf.R_LARCH_SUB64,
        sub8 = elf.R_LARCH_SUB8,
        sub_uleb128 = elf.R_LARCH_SUB_ULEB128,
        tls_desc32 = elf.R_LARCH_TLS_DESC32,
        tls_desc64 = elf.R_LARCH_TLS_DESC64,
        tls_desc64_hi12 = elf.R_LARCH_TLS_DESC64_HI12,
        tls_desc64_lo20 = elf.R_LARCH_TLS_DESC64_LO20,
        tls_desc64_pc_hi12 = elf.R_LARCH_TLS_DESC64_PC_HI12,
        tls_desc64_pc_lo20 = elf.R_LARCH_TLS_DESC64_PC_LO20,
        tls_desc_call = elf.R_LARCH_TLS_DESC_CALL,
        tls_desc_hi20 = elf.R_LARCH_TLS_DESC_HI20,
        tls_desc_ld = elf.R_LARCH_TLS_DESC_LD,
        tls_desc_lo12 = elf.R_LARCH_TLS_DESC_LO12,
        tls_desc_pcrel20_s2 = elf.R_LARCH_TLS_DESC_PCREL20_S2,
        tls_desc_pc_hi20 = elf.R_LARCH_TLS_DESC_PC_HI20,
        tls_desc_pc_lo12 = elf.R_LARCH_TLS_DESC_PC_LO12,
        tls_dtpmod32 = elf.R_LARCH_TLS_DTPMOD32,
        tls_dtpmod64 = elf.R_LARCH_TLS_DTPMOD64,
        tls_dtprel32 = elf.R_LARCH_TLS_DTPREL32,
        tls_dtprel64 = elf.R_LARCH_TLS_DTPREL64,
        tls_gd_hi20 = elf.R_LARCH_TLS_GD_HI20,
        tls_gd_pcrel20_s2 = elf.R_LARCH_TLS_GD_PCREL20_S2,
        tls_gd_pc_hi20 = elf.R_LARCH_TLS_GD_PC_HI20,
        tls_ie64_hi12 = elf.R_LARCH_TLS_IE64_HI12,
        tls_ie64_lo20 = elf.R_LARCH_TLS_IE64_LO20,
        tls_ie64_pc_hi12 = elf.R_LARCH_TLS_IE64_PC_HI12,
        tls_ie64_pc_lo20 = elf.R_LARCH_TLS_IE64_PC_LO20,
        tls_ie_hi20 = elf.R_LARCH_TLS_IE_HI20,
        tls_ie_lo12 = elf.R_LARCH_TLS_IE_LO12,
        tls_ie_pc_hi20 = elf.R_LARCH_TLS_IE_PC_HI20,
        tls_ie_pc_lo12 = elf.R_LARCH_TLS_IE_PC_LO12,
        tls_ld_hi20 = elf.R_LARCH_TLS_LD_HI20,
        tls_ld_pcrel20_s2 = elf.R_LARCH_TLS_LD_PCREL20_S2,
        tls_ld_pc_hi20 = elf.R_LARCH_TLS_LD_PC_HI20,
        tls_le64_hi12 = elf.R_LARCH_TLS_LE64_HI12,
        tls_le64_lo20 = elf.R_LARCH_TLS_LE64_LO20,
        tls_le_add_r = elf.R_LARCH_TLS_LE_ADD_R,
        tls_le_hi20 = elf.R_LARCH_TLS_LE_HI20,
        tls_le_hi20_r = elf.R_LARCH_TLS_LE_HI20_R,
        tls_le_lo12 = elf.R_LARCH_TLS_LE_LO12,
        tls_le_lo12_r = elf.R_LARCH_TLS_LE_LO12_R,
        tls_tprel32 = elf.R_LARCH_TLS_TPREL32,
        tls_tprel64 = elf.R_LARCH_TLS_TPREL64,
    };

    pub const M32r = enum(u16) {
        @"10_pcrel" = elf.R_M32R_10_PCREL,
        @"10_pcrel_rela" = elf.R_M32R_10_PCREL_RELA,
        @"16" = elf.R_M32R_16,
        @"16_rela" = elf.R_M32R_16_RELA,
        @"18_pcrel" = elf.R_M32R_18_PCREL,
        @"18_pcrel_rela" = elf.R_M32R_18_PCREL_RELA,
        @"24" = elf.R_M32R_24,
        @"24_rela" = elf.R_M32R_24_RELA,
        @"26_pcrel" = elf.R_M32R_26_PCREL,
        @"26_pcrel_rela" = elf.R_M32R_26_PCREL_RELA,
        @"26_pltrel" = elf.R_M32R_26_PLTREL,
        @"32" = elf.R_M32R_32,
        @"32_rela" = elf.R_M32R_32_RELA,
        copy = elf.R_M32R_COPY,
        glob_dat = elf.R_M32R_GLOB_DAT,
        gnu_vtentry = elf.R_M32R_GNU_VTENTRY,
        gnu_vtinherit = elf.R_M32R_GNU_VTINHERIT,
        got16_hi_slo = elf.R_M32R_GOT16_HI_SLO,
        got16_hi_ulo = elf.R_M32R_GOT16_HI_ULO,
        got16_lo = elf.R_M32R_GOT16_LO,
        got24 = elf.R_M32R_GOT24,
        gotoff = elf.R_M32R_GOTOFF,
        gotoff_hi_slo = elf.R_M32R_GOTOFF_HI_SLO,
        gotoff_hi_ulo = elf.R_M32R_GOTOFF_HI_ULO,
        gotoff_lo = elf.R_M32R_GOTOFF_LO,
        gotpc24 = elf.R_M32R_GOTPC24,
        gotpc_hi_slo = elf.R_M32R_GOTPC_HI_SLO,
        gotpc_hi_ulo = elf.R_M32R_GOTPC_HI_ULO,
        gotpc_lo = elf.R_M32R_GOTPC_LO,
        hi16_slo = elf.R_M32R_HI16_SLO,
        hi16_slo_rela = elf.R_M32R_HI16_SLO_RELA,
        hi16_ulo = elf.R_M32R_HI16_ULO,
        hi16_ulo_rela = elf.R_M32R_HI16_ULO_RELA,
        jmp_slot = elf.R_M32R_JMP_SLOT,
        lo16 = elf.R_M32R_LO16,
        lo16_rela = elf.R_M32R_LO16_RELA,
        none = elf.R_M32R_NONE,
        num = elf.R_M32R_NUM,
        rel32 = elf.R_M32R_REL32,
        relative = elf.R_M32R_RELATIVE,
        rela_gnu_vtentry = elf.R_M32R_RELA_GNU_VTENTRY,
        rela_gnu_vtinherit = elf.R_M32R_RELA_GNU_VTINHERIT,
        sda16 = elf.R_M32R_SDA16,
        sda16_rela = elf.R_M32R_SDA16_RELA,
    };

    pub const Metag = enum(u16) {
        addr32 = elf.R_METAG_ADDR32,
        copy = elf.R_METAG_COPY,
        getsetoff = elf.R_METAG_GETSETOFF,
        getset_got = elf.R_METAG_GETSET_GOT,
        getset_gotoff = elf.R_METAG_GETSET_GOTOFF,
        glob_dat = elf.R_METAG_GLOB_DAT,
        gnu_vtentry = elf.R_METAG_GNU_VTENTRY,
        gnu_vtinherit = elf.R_METAG_GNU_VTINHERIT,
        gotoff = elf.R_METAG_GOTOFF,
        hi16_gotoff = elf.R_METAG_HI16_GOTOFF,
        hi16_gotpc = elf.R_METAG_HI16_GOTPC,
        hi16_plt = elf.R_METAG_HI16_PLT,
        hiaddr16 = elf.R_METAG_HIADDR16,
        hiog = elf.R_METAG_HIOG,
        jmp_slot = elf.R_METAG_JMP_SLOT,
        lo16_gotoff = elf.R_METAG_LO16_GOTOFF,
        lo16_gotpc = elf.R_METAG_LO16_GOTPC,
        lo16_plt = elf.R_METAG_LO16_PLT,
        loaddr16 = elf.R_METAG_LOADDR16,
        loog = elf.R_METAG_LOOG,
        none = elf.R_METAG_NONE,
        plt = elf.R_METAG_PLT,
        reg16op1 = elf.R_METAG_REG16OP1,
        reg16op2 = elf.R_METAG_REG16OP2,
        reg16op3 = elf.R_METAG_REG16OP3,
        reg32op1 = elf.R_METAG_REG32OP1,
        reg32op2 = elf.R_METAG_REG32OP2,
        reg32op3 = elf.R_METAG_REG32OP3,
        reg32op4 = elf.R_METAG_REG32OP4,
        rel16 = elf.R_METAG_REL16,
        rel8 = elf.R_METAG_REL8,
        relative = elf.R_METAG_RELATIVE,
        relbranch = elf.R_METAG_RELBRANCH,
        relbranch_plt = elf.R_METAG_RELBRANCH_PLT,
        tls_dtpmod = elf.R_METAG_TLS_DTPMOD,
        tls_dtpoff = elf.R_METAG_TLS_DTPOFF,
        tls_gd = elf.R_METAG_TLS_GD,
        tls_ie = elf.R_METAG_TLS_IE,
        tls_ienonpic = elf.R_METAG_TLS_IENONPIC,
        tls_ienonpic_hi16 = elf.R_METAG_TLS_IENONPIC_HI16,
        tls_ienonpic_lo16 = elf.R_METAG_TLS_IENONPIC_LO16,
        tls_ldm = elf.R_METAG_TLS_LDM,
        tls_ldo = elf.R_METAG_TLS_LDO,
        tls_ldo_hi16 = elf.R_METAG_TLS_LDO_HI16,
        tls_ldo_lo16 = elf.R_METAG_TLS_LDO_LO16,
        tls_le = elf.R_METAG_TLS_LE,
        tls_le_hi16 = elf.R_METAG_TLS_LE_HI16,
        tls_le_lo16 = elf.R_METAG_TLS_LE_LO16,
        tls_tpoff = elf.R_METAG_TLS_TPOFF,
    };

    pub const MicroBlaze = enum(u8) {
        @"32" = elf.R_MICROBLAZE_32,
        @"32_lo" = elf.R_MICROBLAZE_32_LO,
        @"32_pcrel" = elf.R_MICROBLAZE_32_PCREL,
        @"32_pcrel_lo" = elf.R_MICROBLAZE_32_PCREL_LO,
        @"32_sym_op_sym" = elf.R_MICROBLAZE_32_SYM_OP_SYM,
        @"64" = elf.R_MICROBLAZE_64,
        @"64_none" = elf.R_MICROBLAZE_64_NONE,
        @"64_pcrel" = elf.R_MICROBLAZE_64_PCREL,
        copy = elf.R_MICROBLAZE_COPY,
        glob_dat = elf.R_MICROBLAZE_GLOB_DAT,
        gnu_vtentry = elf.R_MICROBLAZE_GNU_VTENTRY,
        gnu_vtinherit = elf.R_MICROBLAZE_GNU_VTINHERIT,
        gotoff_32 = elf.R_MICROBLAZE_GOTOFF_32,
        gotoff_64 = elf.R_MICROBLAZE_GOTOFF_64,
        gotpc_64 = elf.R_MICROBLAZE_GOTPC_64,
        got_64 = elf.R_MICROBLAZE_GOT_64,
        jump_slot = elf.R_MICROBLAZE_JUMP_SLOT,
        none = elf.R_MICROBLAZE_NONE,
        plt_64 = elf.R_MICROBLAZE_PLT_64,
        rel = elf.R_MICROBLAZE_REL,
        sro32 = elf.R_MICROBLAZE_SRO32,
        srw32 = elf.R_MICROBLAZE_SRW32,
        tls = elf.R_MICROBLAZE_TLS,
        tlsdtpmod32 = elf.R_MICROBLAZE_TLSDTPMOD32,
        tlsdtprel32 = elf.R_MICROBLAZE_TLSDTPREL32,
        tlsdtprel64 = elf.R_MICROBLAZE_TLSDTPREL64,
        tlsgd = elf.R_MICROBLAZE_TLSGD,
        tlsgottprel32 = elf.R_MICROBLAZE_TLSGOTTPREL32,
        tlsld = elf.R_MICROBLAZE_TLSLD,
        tlstprel32 = elf.R_MICROBLAZE_TLSTPREL32,
    };

    pub const MicroMips = enum(u16) {
        @"26_s1" = elf.R_MICROMIPS_26_S1,
        call16 = elf.R_MICROMIPS_CALL16,
        call_hi16 = elf.R_MICROMIPS_CALL_HI16,
        call_lo16 = elf.R_MICROMIPS_CALL_LO16,
        got16 = elf.R_MICROMIPS_GOT16,
        got_disp = elf.R_MICROMIPS_GOT_DISP,
        got_hi16 = elf.R_MICROMIPS_GOT_HI16,
        got_lo16 = elf.R_MICROMIPS_GOT_LO16,
        got_ofst = elf.R_MICROMIPS_GOT_OFST,
        got_page = elf.R_MICROMIPS_GOT_PAGE,
        gprel16 = elf.R_MICROMIPS_GPREL16,
        gprel7_s2 = elf.R_MICROMIPS_GPREL7_S2,
        hi0_lo16 = elf.R_MICROMIPS_HI0_LO16,
        hi16 = elf.R_MICROMIPS_HI16,
        higher = elf.R_MICROMIPS_HIGHER,
        highest = elf.R_MICROMIPS_HIGHEST,
        jalr = elf.R_MICROMIPS_JALR,
        literal = elf.R_MICROMIPS_LITERAL,
        lo16 = elf.R_MICROMIPS_LO16,
        pc10_s1 = elf.R_MICROMIPS_PC10_S1,
        pc16_s1 = elf.R_MICROMIPS_PC16_S1,
        pc23_s2 = elf.R_MICROMIPS_PC23_S2,
        pc7_s1 = elf.R_MICROMIPS_PC7_S1,
        scn_disp = elf.R_MICROMIPS_SCN_DISP,
        sub = elf.R_MICROMIPS_SUB,
        tls_dtprel_hi16 = elf.R_MICROMIPS_TLS_DTPREL_HI16,
        tls_dtprel_lo16 = elf.R_MICROMIPS_TLS_DTPREL_LO16,
        tls_gd = elf.R_MICROMIPS_TLS_GD,
        tls_gottprel = elf.R_MICROMIPS_TLS_GOTTPREL,
        tls_ldm = elf.R_MICROMIPS_TLS_LDM,
        tls_tprel_hi16 = elf.R_MICROMIPS_TLS_TPREL_HI16,
        tls_tprel_lo16 = elf.R_MICROMIPS_TLS_TPREL_LO16,
    };

    pub const Mips16 = enum(u8) {
        @"26" = elf.R_MIPS16_26,
        call16 = elf.R_MIPS16_CALL16,
        got16 = elf.R_MIPS16_GOT16,
        gprel = elf.R_MIPS16_GPREL,
        hi16 = elf.R_MIPS16_HI16,
        lo16 = elf.R_MIPS16_LO16,
        pc16_s1 = elf.R_MIPS16_PC16_S1,
        tls_dtprel_hi16 = elf.R_MIPS16_TLS_DTPREL_HI16,
        tls_dtprel_lo16 = elf.R_MIPS16_TLS_DTPREL_LO16,
        tls_gd = elf.R_MIPS16_TLS_GD,
        tls_gottprel = elf.R_MIPS16_TLS_GOTTPREL,
        tls_ldm = elf.R_MIPS16_TLS_LDM,
        tls_tprel_hi16 = elf.R_MIPS16_TLS_TPREL_HI16,
        tls_tprel_lo16 = elf.R_MIPS16_TLS_TPREL_LO16,
    };

    pub const Mips = enum(u16) {
        @"16" = elf.R_MIPS_16,
        @"26" = elf.R_MIPS_26,
        @"32" = elf.R_MIPS_32,
        @"64" = elf.R_MIPS_64,
        add_immediate = elf.R_MIPS_ADD_IMMEDIATE,
        call16 = elf.R_MIPS_CALL16,
        call_hi16 = elf.R_MIPS_CALL_HI16,
        call_lo16 = elf.R_MIPS_CALL_LO16,
        copy = elf.R_MIPS_COPY,
        delete = elf.R_MIPS_DELETE,
        eh = elf.R_MIPS_EH,
        glob_dat = elf.R_MIPS_GLOB_DAT,
        gnu_rel16_s2 = elf.R_MIPS_GNU_REL16_S2,
        gnu_vtentry = elf.R_MIPS_GNU_VTENTRY,
        gnu_vtinherit = elf.R_MIPS_GNU_VTINHERIT,
        got16 = elf.R_MIPS_GOT16,
        got_disp = elf.R_MIPS_GOT_DISP,
        got_hi16 = elf.R_MIPS_GOT_HI16,
        got_lo16 = elf.R_MIPS_GOT_LO16,
        got_ofst = elf.R_MIPS_GOT_OFST,
        got_page = elf.R_MIPS_GOT_PAGE,
        gprel16 = elf.R_MIPS_GPREL16,
        gprel32 = elf.R_MIPS_GPREL32,
        hi16 = elf.R_MIPS_HI16,
        higher = elf.R_MIPS_HIGHER,
        highest = elf.R_MIPS_HIGHEST,
        insert_a = elf.R_MIPS_INSERT_A,
        insert_b = elf.R_MIPS_INSERT_B,
        jalr = elf.R_MIPS_JALR,
        jump_slot = elf.R_MIPS_JUMP_SLOT,
        literal = elf.R_MIPS_LITERAL,
        lo16 = elf.R_MIPS_LO16,
        none = elf.R_MIPS_NONE,
        num = elf.R_MIPS_NUM,
        pc16 = elf.R_MIPS_PC16,
        pc18_s3 = elf.R_MIPS_PC18_S3,
        pc19_s2 = elf.R_MIPS_PC19_S2,
        pc21_s2 = elf.R_MIPS_PC21_S2,
        pc26_s2 = elf.R_MIPS_PC26_S2,
        pc32 = elf.R_MIPS_PC32,
        pchi16 = elf.R_MIPS_PCHI16,
        pclo16 = elf.R_MIPS_PCLO16,
        pjump = elf.R_MIPS_PJUMP,
        rel16 = elf.R_MIPS_REL16,
        rel32 = elf.R_MIPS_REL32,
        relative = elf.R_MIPS_RELATIVE,
        relgot = elf.R_MIPS_RELGOT,
        scn_disp = elf.R_MIPS_SCN_DISP,
        shift5 = elf.R_MIPS_SHIFT5,
        shift6 = elf.R_MIPS_SHIFT6,
        sub = elf.R_MIPS_SUB,
        tls_dtpmod32 = elf.R_MIPS_TLS_DTPMOD32,
        tls_dtpmod64 = elf.R_MIPS_TLS_DTPMOD64,
        tls_dtprel32 = elf.R_MIPS_TLS_DTPREL32,
        tls_dtprel64 = elf.R_MIPS_TLS_DTPREL64,
        tls_dtprel_hi16 = elf.R_MIPS_TLS_DTPREL_HI16,
        tls_dtprel_lo16 = elf.R_MIPS_TLS_DTPREL_LO16,
        tls_gd = elf.R_MIPS_TLS_GD,
        tls_gottprel = elf.R_MIPS_TLS_GOTTPREL,
        tls_ldm = elf.R_MIPS_TLS_LDM,
        tls_tprel32 = elf.R_MIPS_TLS_TPREL32,
        tls_tprel64 = elf.R_MIPS_TLS_TPREL64,
        tls_tprel_hi16 = elf.R_MIPS_TLS_TPREL_HI16,
        tls_tprel_lo16 = elf.R_MIPS_TLS_TPREL_LO16,
    };

    pub const Mn10300 = enum(u16) {
        @"16" = elf.R_MN10300_16,
        @"24" = elf.R_MN10300_24,
        @"32" = elf.R_MN10300_32,
        @"8" = elf.R_MN10300_8,
        @"align" = elf.R_MN10300_ALIGN,
        copy = elf.R_MN10300_COPY,
        glob_dat = elf.R_MN10300_GLOB_DAT,
        gnu_vtentry = elf.R_MN10300_GNU_VTENTRY,
        gnu_vtinherit = elf.R_MN10300_GNU_VTINHERIT,
        got16 = elf.R_MN10300_GOT16,
        got24 = elf.R_MN10300_GOT24,
        got32 = elf.R_MN10300_GOT32,
        gotoff16 = elf.R_MN10300_GOTOFF16,
        gotoff24 = elf.R_MN10300_GOTOFF24,
        gotoff32 = elf.R_MN10300_GOTOFF32,
        gotpc16 = elf.R_MN10300_GOTPC16,
        gotpc32 = elf.R_MN10300_GOTPC32,
        jmp_slot = elf.R_MN10300_JMP_SLOT,
        none = elf.R_MN10300_NONE,
        num = elf.R_MN10300_NUM,
        pcrel16 = elf.R_MN10300_PCREL16,
        pcrel32 = elf.R_MN10300_PCREL32,
        pcrel8 = elf.R_MN10300_PCREL8,
        plt16 = elf.R_MN10300_PLT16,
        plt32 = elf.R_MN10300_PLT32,
        relative = elf.R_MN10300_RELATIVE,
        sym_diff = elf.R_MN10300_SYM_DIFF,
        tls_dtpmod = elf.R_MN10300_TLS_DTPMOD,
        tls_dtpoff = elf.R_MN10300_TLS_DTPOFF,
        tls_gd = elf.R_MN10300_TLS_GD,
        tls_gotie = elf.R_MN10300_TLS_GOTIE,
        tls_ie = elf.R_MN10300_TLS_IE,
        tls_ld = elf.R_MN10300_TLS_LD,
        tls_ldo = elf.R_MN10300_TLS_LDO,
        tls_le = elf.R_MN10300_TLS_LE,
        tls_tpoff = elf.R_MN10300_TLS_TPOFF,
    };

    pub const Nds32 = enum(u8) {
        @"32_rela" = elf.R_NDS32_32_RELA,
        copy = elf.R_NDS32_COPY,
        glob_dat = elf.R_NDS32_GLOB_DAT,
        jmp_slot = elf.R_NDS32_JMP_SLOT,
        none = elf.R_NDS32_NONE,
        relative = elf.R_NDS32_RELATIVE,
        tls_desc = elf.R_NDS32_TLS_DESC,
        tls_tpoff = elf.R_NDS32_TLS_TPOFF,
    };

    pub const Nios2 = enum(u16) {
        @"align" = 21,
        bfd_reloc_16 = 13,
        bfd_reloc_32 = 12,
        bfd_reloc_8 = 14,
        cache_opx = 6,
        call16 = 23,
        call26 = 4,
        call26_noat = 41,
        callr = 20,
        call_ha = 45,
        call_lo = 44,
        cjmp = 19,
        copy = 36,
        glob_dat = 37,
        gnu_vtentry = 17,
        gnu_vtinherit = 16,
        got16 = 22,
        gotoff = 40,
        gotoff_ha = 25,
        gotoff_lo = 24,
        got_ha = 43,
        got_lo = 42,
        gprel = 15,
        hi16 = 9,
        hiadj16 = 11,
        imm5 = 5,
        imm6 = 7,
        imm8 = 8,
        jump_slot = 38,
        lo16 = 10,
        none = 0,
        pcrel16 = 3,
        pcrel_ha = 27,
        pcrel_lo = 26,
        relative = 39,
        s16 = 1,
        tls_dtpmod = 33,
        tls_dtprel = 34,
        tls_gd16 = 28,
        tls_ie16 = 31,
        tls_ldm16 = 29,
        tls_ldo16 = 30,
        tls_le16 = 32,
        tls_tprel = 35,
        u16 = 2,
        ujmp = 18,
    };
};
