const std = @import("std");
const elf = @import("elf.zig");
const builtin = std.builtin;
pub const Elf = @This();

pub const AuxType = enum(u8) {
    base = elf.AT_BASE,
    base_platform = elf.AT_BASE_PLATFORM,
    clktck = elf.AT_CLKTCK,
    dcachebsize = elf.AT_DCACHEBSIZE,
    egid = elf.AT_EGID,
    entry = elf.AT_ENTRY,
    euid = elf.AT_EUID,
    execfd = elf.AT_EXECFD,
    execfn = elf.AT_EXECFN,
    flags = elf.AT_FLAGS,
    fpucw = elf.AT_FPUCW,
    gid = elf.AT_GID,
    hwcap = elf.AT_HWCAP,
    hwcap2 = elf.AT_HWCAP2,
    hwcap3 = elf.AT_HWCAP3,
    hwcap4 = elf.AT_HWCAP4,
    icachebsize = elf.AT_ICACHEBSIZE,
    ignore = elf.AT_IGNORE,
    ignoreppc = elf.AT_IGNOREPPC,
    l1d_cachegeometry = elf.AT_L1D_CACHEGEOMETRY,
    l1d_cacheshape = elf.AT_L1D_CACHESHAPE,
    l1d_cachesize = elf.AT_L1D_CACHESIZE,
    l1i_cachegeometry = elf.AT_L1I_CACHEGEOMETRY,
    l1i_cacheshape = elf.AT_L1I_CACHESHAPE,
    l1i_cachesize = elf.AT_L1I_CACHESIZE,
    l2_cachegeometry = elf.AT_L2_CACHEGEOMETRY,
    l2_cacheshape = elf.AT_L2_CACHESHAPE,
    l2_cachesize = elf.AT_L2_CACHESIZE,
    l3_cachegeometry = elf.AT_L3_CACHEGEOMETRY,
    l3_cacheshape = elf.AT_L3_CACHESHAPE,
    l3_cachesize = elf.AT_L3_CACHESIZE,
    minsigstksz = elf.AT_MINSIGSTKSZ,
    notelf = elf.AT_NOTELF,
    null = elf.AT_NULL,
    pagesz = elf.AT_PAGESZ,
    phdr = elf.AT_PHDR,
    phent = elf.AT_PHENT,
    phnum = elf.AT_PHNUM,
    platform = elf.AT_PLATFORM,
    random = elf.AT_RANDOM,
    rseq_align = elf.AT_RSEQ_ALIGN,
    rseq_feature_size = elf.AT_RSEQ_FEATURE_SIZE,
    secure = elf.AT_SECURE,
    sysinfo = elf.AT_SYSINFO,
    sysinfo_ehdr = elf.AT_SYSINFO_EHDR,
    ucachebsize = elf.AT_UCACHEBSIZE,
    uid = elf.AT_UID,
};

pub const DynFlags1 = enum(u64) {
    confalt = elf.DF_1_CONFALT,
    direct = elf.DF_1_DIRECT,
    dispreldne = elf.DF_1_DISPRELDNE,
    disprelpnd = elf.DF_1_DISPRELPND,
    edited = elf.DF_1_EDITED,
    endfiltee = elf.DF_1_ENDFILTEE,
    global = elf.DF_1_GLOBAL,
    globaudit = elf.DF_1_GLOBAUDIT,
    group = elf.DF_1_GROUP,
    ignmuldef = elf.DF_1_IGNMULDEF,
    initfirst = elf.DF_1_INITFIRST,
    interpose = elf.DF_1_INTERPOSE,
    kmod = elf.DF_1_KMOD,
    loadfltr = elf.DF_1_LOADFLTR,
    nocommon = elf.DF_1_NOCOMMON,
    nodeflib = elf.DF_1_NODEFLIB,
    nodelete = elf.DF_1_NODELETE,
    nodirect = elf.DF_1_NODIRECT,
    nodump = elf.DF_1_NODUMP,
    nohdr = elf.DF_1_NOHDR,
    noksyms = elf.DF_1_NOKSYMS,
    noopen = elf.DF_1_NOOPEN,
    noreloc = elf.DF_1_NORELOC,
    now = elf.DF_1_NOW,
    origin = elf.DF_1_ORIGIN,
    pie = elf.DF_1_PIE,
    singleton = elf.DF_1_SINGLETON,
    stub = elf.DF_1_STUB,
    symintpose = elf.DF_1_SYMINTPOSE,
    trans = elf.DF_1_TRANS,
    weakfilter = elf.DF_1_WEAKFILTER,
};

pub const DynFlags = enum(u64) {
    bind_now = elf.DF_BIND_NOW,
    origin = elf.DF_ORIGIN,
    p1_groupperm = elf.DF_P1_GROUPPERM,
    p1_lazyload = elf.DF_P1_LAZYLOAD,
    static_tls = elf.DF_STATIC_TLS,
    symbolic = elf.DF_SYMBOLIC,
    textrel = elf.DF_TEXTREL,
};

pub const DynTransferFlags1 = enum(u64) {
    confexp = elf.DTF_1_CONFEXP,
    parinit = elf.DTF_1_PARINIT,
};

pub const DynTags = enum(u64) {
    aarch64_bti_plt = elf.DT_AARCH64_BTI_PLT,
    aarch64_num = elf.DT_AARCH64_NUM,
    aarch64_pac_plt = elf.DT_AARCH64_PAC_PLT,
    aarch64_variant_pcs = elf.DT_AARCH64_VARIANT_PCS,
    addrnum = elf.DT_ADDRNUM,
    addrrnghi = elf.DT_ADDRRNGHI,
    addrrnglo = elf.DT_ADDRRNGLO,
    alpha_num = elf.DT_ALPHA_NUM,
    alpha_pltro = elf.DT_ALPHA_PLTRO,
    audit = elf.DT_AUDIT,
    auxiliary = elf.DT_AUXILIARY,
    bind_now = elf.DT_BIND_NOW,
    checksum = elf.DT_CHECKSUM,
    config = elf.DT_CONFIG,
    debug = elf.DT_DEBUG,
    depaudit = elf.DT_DEPAUDIT,
    encoding = elf.DT_ENCODING,
    extranum = elf.DT_EXTRANUM,
    feature_1 = elf.DT_FEATURE_1,
    filter = elf.DT_FILTER,
    fini = elf.DT_FINI,
    fini_array = elf.DT_FINI_ARRAY,
    fini_arraysz = elf.DT_FINI_ARRAYSZ,
    flags = elf.DT_FLAGS,
    flags_1 = elf.DT_FLAGS_1,
    gnu_conflict = elf.DT_GNU_CONFLICT,
    gnu_conflictsz = elf.DT_GNU_CONFLICTSZ,
    gnu_hash = elf.DT_GNU_HASH,
    gnu_liblist = elf.DT_GNU_LIBLIST,
    gnu_liblistsz = elf.DT_GNU_LIBLISTSZ,
    gnu_prelinked = elf.DT_GNU_PRELINKED,
    hash = elf.DT_HASH,
    hios = elf.DT_HIOS,
    hiproc = elf.DT_HIPROC,
    ia_64_num = elf.DT_IA_64_NUM,
    ia_64_plt_reserve = elf.DT_IA_64_PLT_RESERVE,
    init = elf.DT_INIT,
    init_array = elf.DT_INIT_ARRAY,
    init_arraysz = elf.DT_INIT_ARRAYSZ,
    jmprel = elf.DT_JMPREL,
    loos = elf.DT_LOOS,
    loproc = elf.DT_LOPROC,
    mips_aux_dynamic = elf.DT_MIPS_AUX_DYNAMIC,
    mips_base_address = elf.DT_MIPS_BASE_ADDRESS,
    mips_compact_size = elf.DT_MIPS_COMPACT_SIZE,
    mips_conflict = elf.DT_MIPS_CONFLICT,
    mips_conflictno = elf.DT_MIPS_CONFLICTNO,
    mips_cxx_flags = elf.DT_MIPS_CXX_FLAGS,
    mips_delta_class = elf.DT_MIPS_DELTA_CLASS,
    mips_delta_classsym = elf.DT_MIPS_DELTA_CLASSSYM,
    mips_delta_classsym_no = elf.DT_MIPS_DELTA_CLASSSYM_NO,
    mips_delta_class_no = elf.DT_MIPS_DELTA_CLASS_NO,
    mips_delta_instance = elf.DT_MIPS_DELTA_INSTANCE,
    mips_delta_instance_no = elf.DT_MIPS_DELTA_INSTANCE_NO,
    mips_delta_reloc = elf.DT_MIPS_DELTA_RELOC,
    mips_delta_reloc_no = elf.DT_MIPS_DELTA_RELOC_NO,
    mips_delta_sym = elf.DT_MIPS_DELTA_SYM,
    mips_delta_sym_no = elf.DT_MIPS_DELTA_SYM_NO,
    mips_dynstr_align = elf.DT_MIPS_DYNSTR_ALIGN,
    mips_flags = elf.DT_MIPS_FLAGS,
    mips_gotsym = elf.DT_MIPS_GOTSYM,
    mips_gp_value = elf.DT_MIPS_GP_VALUE,
    mips_hidden_gotidx = elf.DT_MIPS_HIDDEN_GOTIDX,
    mips_hipageno = elf.DT_MIPS_HIPAGENO,
    mips_ichecksum = elf.DT_MIPS_ICHECKSUM,
    mips_interface = elf.DT_MIPS_INTERFACE,
    mips_interface_size = elf.DT_MIPS_INTERFACE_SIZE,
    mips_iversion = elf.DT_MIPS_IVERSION,
    mips_liblist = elf.DT_MIPS_LIBLIST,
    mips_liblistno = elf.DT_MIPS_LIBLISTNO,
    mips_localpage_gotidx = elf.DT_MIPS_LOCALPAGE_GOTIDX,
    mips_local_gotidx = elf.DT_MIPS_LOCAL_GOTIDX,
    mips_local_gotno = elf.DT_MIPS_LOCAL_GOTNO,
    mips_msym = elf.DT_MIPS_MSYM,
    mips_num = elf.DT_MIPS_NUM,
    mips_options = elf.DT_MIPS_OPTIONS,
    mips_perf_suffix = elf.DT_MIPS_PERF_SUFFIX,
    mips_pixie_init = elf.DT_MIPS_PIXIE_INIT,
    mips_pltgot = elf.DT_MIPS_PLTGOT,
    mips_protected_gotidx = elf.DT_MIPS_PROTECTED_GOTIDX,
    mips_rld_map = elf.DT_MIPS_RLD_MAP,
    mips_rld_map_rel = elf.DT_MIPS_RLD_MAP_REL,
    mips_rld_text_resolve_addr = elf.DT_MIPS_RLD_TEXT_RESOLVE_ADDR,
    mips_rld_version = elf.DT_MIPS_RLD_VERSION,
    mips_rwplt = elf.DT_MIPS_RWPLT,
    mips_symbol_lib = elf.DT_MIPS_SYMBOL_LIB,
    mips_symtabno = elf.DT_MIPS_SYMTABNO,
    mips_time_stamp = elf.DT_MIPS_TIME_STAMP,
    mips_unrefextno = elf.DT_MIPS_UNREFEXTNO,
    mips_xhash = elf.DT_MIPS_XHASH,
    moveent = elf.DT_MOVEENT,
    movesz = elf.DT_MOVESZ,
    movetab = elf.DT_MOVETAB,
    needed = elf.DT_NEEDED,
    nios2_gp = elf.DT_NIOS2_GP,
    null = elf.DT_NULL,
    num = elf.DT_NUM,
    pltgot = elf.DT_PLTGOT,
    pltpad = elf.DT_PLTPAD,
    pltpadsz = elf.DT_PLTPADSZ,
    pltrel = elf.DT_PLTREL,
    pltrelsz = elf.DT_PLTRELSZ,
    posflag_1 = elf.DT_POSFLAG_1,
    ppc64_glink = elf.DT_PPC64_GLINK,
    ppc64_num = elf.DT_PPC64_NUM,
    ppc64_opd = elf.DT_PPC64_OPD,
    ppc64_opdsz = elf.DT_PPC64_OPDSZ,
    ppc64_opt = elf.DT_PPC64_OPT,
    ppc_got = elf.DT_PPC_GOT,
    ppc_num = elf.DT_PPC_NUM,
    ppc_opt = elf.DT_PPC_OPT,
    preinit_array = elf.DT_PREINIT_ARRAY,
    preinit_arraysz = elf.DT_PREINIT_ARRAYSZ,
    procnum = elf.DT_PROCNUM,
    rel = elf.DT_REL,
    rela = elf.DT_RELA,
    relacount = elf.DT_RELACOUNT,
    relaent = elf.DT_RELAENT,
    relasz = elf.DT_RELASZ,
    relcount = elf.DT_RELCOUNT,
    relent = elf.DT_RELENT,
    relr = elf.DT_RELR,
    relrent = elf.DT_RELRENT,
    relrsz = elf.DT_RELRSZ,
    relsz = elf.DT_RELSZ,
    riscv_variant_cc = elf.DT_RISCV_VARIANT_CC,
    rpath = elf.DT_RPATH,
    runpath = elf.DT_RUNPATH,
    soname = elf.DT_SONAME,
    sparc_num = elf.DT_SPARC_NUM,
    sparc_register = elf.DT_SPARC_REGISTER,
    strsz = elf.DT_STRSZ,
    strtab = elf.DT_STRTAB,
    symbolic = elf.DT_SYMBOLIC,
    syment = elf.DT_SYMENT,
    syminent = elf.DT_SYMINENT,
    syminfo = elf.DT_SYMINFO,
    syminsz = elf.DT_SYMINSZ,
    symtab = elf.DT_SYMTAB,
    symtab_shndx = elf.DT_SYMTAB_SHNDX,
    textrel = elf.DT_TEXTREL,
    tlsdesc_got = elf.DT_TLSDESC_GOT,
    tlsdesc_plt = elf.DT_TLSDESC_PLT,
    valnum = elf.DT_VALNUM,
    valrnghi = elf.DT_VALRNGHI,
    valrnglo = elf.DT_VALRNGLO,
    verdef = elf.DT_VERDEF,
    verdefnum = elf.DT_VERDEFNUM,
    verneed = elf.DT_VERNEED,
    verneednum = elf.DT_VERNEEDNUM,
    versiontagnum = elf.DT_VERSIONTAGNUM,
    versym = elf.DT_VERSYM,
    x86_64_num = elf.DT_X86_64_NUM,
    x86_64_plt = elf.DT_X86_64_PLT,
    x86_64_pltent = elf.DT_X86_64_PLTENT,
    x86_64_pltsz = elf.DT_X86_64_PLTSZ,
};

pub const PariscFlags = enum(u32) {
    parisc_1_0 = elf.EFA_PARISC_1_0,
    parisc_1_1 = elf.EFA_PARISC_1_1,
    parisc_2_0 = elf.EFA_PARISC_2_0,
};

pub const ArchFlags = packed struct {
    pub const Alpha = enum(u32) {
        alpha_32bit = elf.EF_ALPHA_32BIT,
        alpha_canrelax = elf.EF_ALPHA_CANRELAX,
        _,
    };

    pub const Arc = enum(u32) {
        arc_all_msk = elf.EF_ARC_ALL_MSK,
        arc_mach_msk = elf.EF_ARC_MACH_MSK,
        arc_osabi_msk = elf.EF_ARC_OSABI_MSK,
        _,
    };

    pub const Arm = enum(u32) {
        arm_abi_float_hard = elf.EF_ARM_ABI_FLOAT_HARD,
        arm_abi_float_soft = elf.EF_ARM_ABI_FLOAT_SOFT,
        arm_align8 = elf.EF_ARM_ALIGN8,
        arm_apcs_26 = elf.EF_ARM_APCS_26,
        arm_apcs_float = elf.EF_ARM_APCS_FLOAT,
        arm_be8 = elf.EF_ARM_BE8,
        arm_dynsymsusesegidx = elf.EF_ARM_DYNSYMSUSESEGIDX,
        arm_eabimask = elf.EF_ARM_EABIMASK,
        arm_eabi_unknown = elf.EF_ARM_EABI_UNKNOWN,
        arm_eabi_ver1 = elf.EF_ARM_EABI_VER1,
        arm_eabi_ver2 = elf.EF_ARM_EABI_VER2,
        arm_eabi_ver3 = elf.EF_ARM_EABI_VER3,
        arm_eabi_ver4 = elf.EF_ARM_EABI_VER4,
        arm_eabi_ver5 = elf.EF_ARM_EABI_VER5,
        arm_hasentry = elf.EF_ARM_HASENTRY,
        arm_interwork = elf.EF_ARM_INTERWORK,
        arm_le8 = elf.EF_ARM_LE8,
        arm_mapsymsfirst = elf.EF_ARM_MAPSYMSFIRST,
        arm_maverick_float = elf.EF_ARM_MAVERICK_FLOAT,
        arm_new_abi = elf.EF_ARM_NEW_ABI,
        arm_old_abi = elf.EF_ARM_OLD_ABI,
        arm_pic = elf.EF_ARM_PIC,
        arm_relexec = elf.EF_ARM_RELEXEC,
        arm_soft_float = elf.EF_ARM_SOFT_FLOAT,
        arm_symsaresorted = elf.EF_ARM_SYMSARESORTED,
        arm_vfp_float = elf.EF_ARM_VFP_FLOAT,
        _,
    };

    pub const Cpu32 = enum(u32) {
        cpu32 = elf.EF_CPU32,
        _,
    };

    pub const Csky = enum(u32) {
        csky_abimask = elf.EF_CSKY_ABIMASK,
        csky_abiv1 = elf.EF_CSKY_ABIV1,
        csky_abiv2 = elf.EF_CSKY_ABIV2,
        csky_other = elf.EF_CSKY_OTHER,
        csky_processor = elf.EF_CSKY_PROCESSOR,
        _,
    };

    pub const Ia64 = enum(u32) {
        ia_64_abi64 = elf.EF_IA_64_ABI64,
        ia_64_arch = elf.EF_IA_64_ARCH,
        ia_64_maskos = elf.EF_IA_64_MASKOS,
        _,
    };

    pub const Larch = enum(u32) {
        larch_abi_double_float = elf.EF_LARCH_ABI_DOUBLE_FLOAT,
        larch_abi_modifier_mask = elf.EF_LARCH_ABI_MODIFIER_MASK,
        larch_abi_single_float = elf.EF_LARCH_ABI_SINGLE_FLOAT,
        larch_abi_soft_float = elf.EF_LARCH_ABI_SOFT_FLOAT,
        larch_objabi_v1 = elf.EF_LARCH_OBJABI_V1,
        _,
    };

    pub const Mips = enum(u64) {
        mips_32bitmode = elf.EF_MIPS_32BITMODE,
        mips_abi = elf.EF_MIPS_ABI,
        mips_abi2 = elf.EF_MIPS_ABI2,
        mips_abi_eabi32 = elf.EF_MIPS_ABI_EABI32,
        mips_abi_eabi64 = elf.EF_MIPS_ABI_EABI64,
        mips_abi_o32 = elf.EF_MIPS_ABI_O32,
        mips_abi_o64 = elf.EF_MIPS_ABI_O64,
        mips_abi_on32 = elf.EF_MIPS_ABI_ON32,
        mips_arch = elf.EF_MIPS_ARCH,
        mips_arch_1 = elf.EF_MIPS_ARCH_1,
        mips_arch_2 = elf.EF_MIPS_ARCH_2,
        mips_arch_3 = elf.EF_MIPS_ARCH_3,
        mips_arch_32 = elf.EF_MIPS_ARCH_32,
        mips_arch_32r2 = elf.EF_MIPS_ARCH_32R2,
        mips_arch_32r6 = elf.EF_MIPS_ARCH_32R6,
        mips_arch_4 = elf.EF_MIPS_ARCH_4,
        mips_arch_5 = elf.EF_MIPS_ARCH_5,
        mips_arch_64 = elf.EF_MIPS_ARCH_64,
        mips_arch_64r2 = elf.EF_MIPS_ARCH_64R2,
        mips_arch_64r6 = elf.EF_MIPS_ARCH_64R6,
        mips_arch_ase = elf.EF_MIPS_ARCH_ASE,
        mips_arch_ase_m16 = elf.EF_MIPS_ARCH_ASE_M16,
        mips_arch_ase_mdmx = elf.EF_MIPS_ARCH_ASE_MDMX,
        mips_arch_ase_micromips = elf.EF_MIPS_ARCH_ASE_MICROMIPS,
        mips_cpic = elf.EF_MIPS_CPIC,
        mips_fp64 = elf.EF_MIPS_FP64,
        mips_mach = elf.EF_MIPS_MACH,
        mips_mach_3900 = elf.EF_MIPS_MACH_3900,
        mips_mach_4010 = elf.EF_MIPS_MACH_4010,
        mips_mach_4100 = elf.EF_MIPS_MACH_4100,
        mips_mach_4111 = elf.EF_MIPS_MACH_4111,
        mips_mach_4120 = elf.EF_MIPS_MACH_4120,
        mips_mach_4650 = elf.EF_MIPS_MACH_4650,
        mips_mach_5400 = elf.EF_MIPS_MACH_5400,
        mips_mach_5500 = elf.EF_MIPS_MACH_5500,
        mips_mach_5900 = elf.EF_MIPS_MACH_5900,
        mips_mach_9000 = elf.EF_MIPS_MACH_9000,
        mips_mach_allegrex = elf.EF_MIPS_MACH_ALLEGREX,
        mips_mach_gs264e = elf.EF_MIPS_MACH_GS264E,
        mips_mach_gs464 = elf.EF_MIPS_MACH_GS464,
        mips_mach_gs464e = elf.EF_MIPS_MACH_GS464E,
        mips_mach_iamr2 = elf.EF_MIPS_MACH_IAMR2,
        mips_mach_ls2e = elf.EF_MIPS_MACH_LS2E,
        mips_mach_ls2f = elf.EF_MIPS_MACH_LS2F,
        mips_mach_octeon = elf.EF_MIPS_MACH_OCTEON,
        mips_mach_octeon2 = elf.EF_MIPS_MACH_OCTEON2,
        mips_mach_octeon3 = elf.EF_MIPS_MACH_OCTEON3,
        mips_mach_sb1 = elf.EF_MIPS_MACH_SB1,
        mips_mach_xlr = elf.EF_MIPS_MACH_XLR,
        mips_nan2008 = elf.EF_MIPS_NAN2008,
        mips_noreorder = elf.EF_MIPS_NOREORDER,
        mips_options_first = elf.EF_MIPS_OPTIONS_FIRST,
        mips_pic = elf.EF_MIPS_PIC,
        mips_ucode = elf.EF_MIPS_UCODE,
        mips_xgot = elf.EF_MIPS_XGOT,
    };

    pub const Parisc = enum(u64) {
        PARISC_ARCH = elf.EF_PARISC_ARCH,
        PARISC_EXT = elf.EF_PARISC_EXT,
        PARISC_LAZYSWAP = elf.EF_PARISC_LAZYSWAP,
        PARISC_LSB = elf.EF_PARISC_LSB,
        PARISC_NO_KABP = elf.EF_PARISC_NO_KABP,
        PARISC_TRAPNIL = elf.EF_PARISC_TRAPNIL,
        PARISC_WIDE = elf.EF_PARISC_WIDE,
    };

    pub const Ppc64 = enum(u8) {
        ppc64_abi = elf.EF_PPC64_ABI,
    };

    pub const Ppc = enum(u64) {
        EF_PPC_EMB = elf.EF_PPC_EMB,
        EF_PPC_RELOCATABLE = elf.EF_PPC_RELOCATABLE,
        EF_PPC_RELOCATABLE_LIB = elf.EF_PPC_RELOCATABLE_LIB,
    };

    pub const RiscV = enum(u64) {
        riscv_float_abi = elf.EF_RISCV_FLOAT_ABI,
        riscv_float_abi_double = elf.EF_RISCV_FLOAT_ABI_DOUBLE,
        riscv_float_abi_quad = elf.EF_RISCV_FLOAT_ABI_QUAD,
        riscv_float_abi_single = elf.EF_RISCV_FLOAT_ABI_SINGLE,
        riscv_float_abi_soft = elf.EF_RISCV_FLOAT_ABI_SOFT,
        riscv_rvc = elf.EF_RISCV_RVC,
        riscv_rve = elf.EF_RISCV_RVE,
        riscv_tso = elf.EF_RISCV_TSO,
        _,
    };

    pub const S390 = enum(u64) {
        s390_high_gprs = elf.EF_S390_HIGH_GPRS,
        _,
    };

    pub const Sh = enum(u8) {
        sh1 = elf.EF_SH1,
        sh2 = elf.EF_SH2,
        sh2a = elf.EF_SH2A,
        sh2a_nofpu = elf.EF_SH2A_NOFPU,
        sh2a_sh3e = elf.EF_SH2A_SH3E,
        sh2a_sh3_nofpu = elf.EF_SH2A_SH3_NOFPU,
        sh2a_sh4 = elf.EF_SH2A_SH4,
        sh2a_sh4_nofpu = elf.EF_SH2A_SH4_NOFPU,
        sh2e = elf.EF_SH2E,
        sh3 = elf.EF_SH3,
        sh3e = elf.EF_SH3E,
        sh3_dsp = elf.EF_SH3_DSP,
        sh3_nommu = elf.EF_SH3_NOMMU,
        sh4 = elf.EF_SH4,
        sh4a = elf.EF_SH4A,
        sh4al_dsp = elf.EF_SH4AL_DSP,
        sh4a_nofpu = elf.EF_SH4A_NOFPU,
        sh4_nofpu = elf.EF_SH4_NOFPU,
        sh4_nommu_nofpu = elf.EF_SH4_NOMMU_NOFPU,
        sh_dsp = elf.EF_SH_DSP,
        sh_mach_mask = elf.EF_SH_MACH_MASK,
        sh_unknown = elf.EF_SH_UNKNOWN,
    };

    pub const SparcV = enum(u64) {
        sparcv9_mm = elf.EF_SPARCV9_MM,
        sparcv9_pso = elf.EF_SPARCV9_PSO,
        sparcv9_rmo = elf.EF_SPARCV9_RMO,
        sparcv9_tso = elf.EF_SPARCV9_TSO,
        sparc_32plus = elf.EF_SPARC_32PLUS,
        sparc_ext_mask = elf.EF_SPARC_EXT_MASK,
        sparc_hal_r1 = elf.EF_SPARC_HAL_R1,
        sparc_ledata = elf.EF_SPARC_LEDATA,
        sparc_sun_us1 = elf.EF_SPARC_SUN_US1,
        sparc_sun_us3 = elf.EF_SPARC_SUN_US3,
    };
};
