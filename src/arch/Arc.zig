const std = @import("std");
const elf = @import("../elf.zig");
const Arc = @This();

pub const Arch = packed struct {
    pub const Flags = enum(u32) {
        all_msk = elf.EF_ARC_ALL_MSK,
        mach_msk = elf.EF_ARC_MACH_MSK,
        osabi_msk = elf.EF_ARC_OSABI_MSK,
        _,
    };
};

pub const Section = struct {
    pub const Type = enum(u32) {
        attributes = elf.SHT_ARC_ATTRIBUTES,
    };
};

pub const Relocation = enum(u16) {
    @"16" = elf.R_ARC_16,
    @"24" = elf.R_ARC_24,
    @"32" = elf.R_ARC_32,
    @"32_me" = elf.R_ARC_32_ME,
    @"32_pcrel" = elf.R_ARC_32_PCREL,
    @"8" = elf.R_ARC_8,
    b22_pcrel = elf.R_ARC_B22_PCREL,
    copy = elf.R_ARC_COPY,
    glob_dat = elf.R_ARC_GLOB_DAT,
    got32 = elf.R_ARC_GOT32,
    gotoff = elf.R_ARC_GOTOFF,
    gotpc = elf.R_ARC_GOTPC,
    gotpc32 = elf.R_ARC_GOTPC32,
    h30 = elf.R_ARC_H30,
    h30_me = elf.R_ARC_H30_ME,
    jli_sectoff = elf.R_ARC_JLI_SECTOFF,
    jmp_slot = elf.R_ARC_JMP_SLOT,
    n16 = elf.R_ARC_N16,
    n24 = elf.R_ARC_N24,
    n32 = elf.R_ARC_N32,
    n32_me = elf.R_ARC_N32_ME,
    n8 = elf.R_ARC_N8,
    none = elf.R_ARC_NONE,
    nps_cmem16 = elf.R_ARC_NPS_CMEM16,
    pc32 = elf.R_ARC_PC32,
    plt32 = elf.R_ARC_PLT32,
    relative = elf.R_ARC_RELATIVE,
    s13_pcrel = elf.R_ARC_S13_PCREL,
    s21h_pcrel = elf.R_ARC_S21H_PCREL,
    s21h_pcrel_plt = elf.R_ARC_S21H_PCREL_PLT,
    s21w_pcrel = elf.R_ARC_S21W_PCREL,
    s21w_pcrel_plt = elf.R_ARC_S21W_PCREL_PLT,
    s25h_pcrel = elf.R_ARC_S25H_PCREL,
    s25h_pcrel_plt = elf.R_ARC_S25H_PCREL_PLT,
    s25w_pcrel = elf.R_ARC_S25W_PCREL,
    s25w_pcrel_plt = elf.R_ARC_S25W_PCREL_PLT,
    sda = elf.R_ARC_SDA,
    sda16_ld = elf.R_ARC_SDA16_LD,
    sda16_ld1 = elf.R_ARC_SDA16_LD1,
    sda16_ld2 = elf.R_ARC_SDA16_LD2,
    sda16_st2 = elf.R_ARC_SDA16_ST2,
    sda32 = elf.R_ARC_SDA32,
    sda32_me = elf.R_ARC_SDA32_ME,
    sda_12 = elf.R_ARC_SDA_12,
    sda_ldst = elf.R_ARC_SDA_LDST,
    sda_ldst1 = elf.R_ARC_SDA_LDST1,
    sda_ldst2 = elf.R_ARC_SDA_LDST2,
    sectoff = elf.R_ARC_SECTOFF,
    sectoff_1 = elf.R_ARC_SECTOFF_1,
    sectoff_2 = elf.R_ARC_SECTOFF_2,
    sectoff_me = elf.R_ARC_SECTOFF_ME,
    sectoff_me_1 = elf.R_ARC_SECTOFF_ME_1,
    sectoff_me_2 = elf.R_ARC_SECTOFF_ME_2,
    sectoff_s9 = elf.R_ARC_SECTOFF_S9,
    sectoff_u8 = elf.R_ARC_SECTOFF_U8,
    tls_dtpmod = elf.R_ARC_TLS_DTPMOD,
    tls_dtpoff = elf.R_ARC_TLS_DTPOFF,
    tls_dtpoff_s9 = elf.R_ARC_TLS_DTPOFF_S9,
    tls_gd_call = elf.R_ARC_TLS_GD_CALL,
    tls_gd_got = elf.R_ARC_TLS_GD_GOT,
    tls_gd_ld = elf.R_ARC_TLS_GD_LD,
    tls_ie_got = elf.R_ARC_TLS_IE_GOT,
    tls_le_32 = elf.R_ARC_TLS_LE_32,
    tls_le_s9 = elf.R_ARC_TLS_LE_S9,
    tls_tpoff = elf.R_ARC_TLS_TPOFF,
    w = elf.R_ARC_W,
    w_me = elf.R_ARC_W_ME,
};
