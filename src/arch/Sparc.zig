const std = @import("std");
const elf = @import("../elf.zig");
const Sparc = @This();

pub const Arch = struct {
    pub const Flags = enum(u64) {
        sparcv9_mm = elf.EF_SPARCV9_MM,
        sparcv9_pso = elf.EF_SPARCV9_PSO,
        sparcv9_rmo = elf.EF_SPARCV9_RMO,
        sparcv9_tso = elf.EF_SPARCV9_TSO,
        sparc_32plus = elf.EF_SPARC_32PLUS,
        sparc_ext_mask = elf.EF_SPARC_EXT_MASK,
        sparc_hal_r1 = elf.EF_SPARC_HAL_R1,
        sparc_ledata = elf.EF_SPARC_LEDATA,
        sparc_sun_us1 = elf.EF_SPARC_SUN_US1,
        sparc_sun_us3 = elf.EF_SPARC_SUN_US3,
        _,
    };
};

pub const Relocation = enum(u16) {
    @"10" = elf.R_SPARC_10,
    @"11" = elf.R_SPARC_11,
    @"13" = elf.R_SPARC_13,
    @"16" = elf.R_SPARC_16,
    @"22" = elf.R_SPARC_22,
    @"32" = elf.R_SPARC_32,
    @"5" = elf.R_SPARC_5,
    @"6" = elf.R_SPARC_6,
    @"64" = elf.R_SPARC_64,
    @"7" = elf.R_SPARC_7,
    @"8" = elf.R_SPARC_8,
    copy = elf.R_SPARC_COPY,
    disp16 = elf.R_SPARC_DISP16,
    disp32 = elf.R_SPARC_DISP32,
    disp64 = elf.R_SPARC_DISP64,
    disp8 = elf.R_SPARC_DISP8,
    glob_dat = elf.R_SPARC_GLOB_DAT,
    glob_jmp = elf.R_SPARC_GLOB_JMP,
    gnu_vtentry = elf.R_SPARC_GNU_VTENTRY,
    gnu_vtinherit = elf.R_SPARC_GNU_VTINHERIT,
    got10 = elf.R_SPARC_GOT10,
    got13 = elf.R_SPARC_GOT13,
    got22 = elf.R_SPARC_GOT22,
    gotdata_hix22 = elf.R_SPARC_GOTDATA_HIX22,
    gotdata_lox10 = elf.R_SPARC_GOTDATA_LOX10,
    gotdata_op = elf.R_SPARC_GOTDATA_OP,
    gotdata_op_hix22 = elf.R_SPARC_GOTDATA_OP_HIX22,
    gotdata_op_lox10 = elf.R_SPARC_GOTDATA_OP_LOX10,
    h34 = elf.R_SPARC_H34,
    h44 = elf.R_SPARC_H44,
    hh22 = elf.R_SPARC_HH22,
    hi22 = elf.R_SPARC_HI22,
    hiplt22 = elf.R_SPARC_HIPLT22,
    hix22 = elf.R_SPARC_HIX22,
    hm10 = elf.R_SPARC_HM10,
    irelative = elf.R_SPARC_IRELATIVE,
    jmp_irel = elf.R_SPARC_JMP_IREL,
    jmp_slot = elf.R_SPARC_JMP_SLOT,
    l44 = elf.R_SPARC_L44,
    lm22 = elf.R_SPARC_LM22,
    lo10 = elf.R_SPARC_LO10,
    loplt10 = elf.R_SPARC_LOPLT10,
    lox10 = elf.R_SPARC_LOX10,
    m44 = elf.R_SPARC_M44,
    none = elf.R_SPARC_NONE,
    num = elf.R_SPARC_NUM,
    olo10 = elf.R_SPARC_OLO10,
    pc10 = elf.R_SPARC_PC10,
    pc22 = elf.R_SPARC_PC22,
    pcplt10 = elf.R_SPARC_PCPLT10,
    pcplt22 = elf.R_SPARC_PCPLT22,
    pcplt32 = elf.R_SPARC_PCPLT32,
    pc_hh22 = elf.R_SPARC_PC_HH22,
    pc_hm10 = elf.R_SPARC_PC_HM10,
    pc_lm22 = elf.R_SPARC_PC_LM22,
    plt32 = elf.R_SPARC_PLT32,
    plt64 = elf.R_SPARC_PLT64,
    register = elf.R_SPARC_REGISTER,
    relative = elf.R_SPARC_RELATIVE,
    rev32 = elf.R_SPARC_REV32,
    size32 = elf.R_SPARC_SIZE32,
    size64 = elf.R_SPARC_SIZE64,
    tls_dtpmod32 = elf.R_SPARC_TLS_DTPMOD32,
    tls_dtpmod64 = elf.R_SPARC_TLS_DTPMOD64,
    tls_dtpoff32 = elf.R_SPARC_TLS_DTPOFF32,
    tls_dtpoff64 = elf.R_SPARC_TLS_DTPOFF64,
    tls_gd_add = elf.R_SPARC_TLS_GD_ADD,
    tls_gd_call = elf.R_SPARC_TLS_GD_CALL,
    tls_gd_hi22 = elf.R_SPARC_TLS_GD_HI22,
    tls_gd_lo10 = elf.R_SPARC_TLS_GD_LO10,
    tls_ie_add = elf.R_SPARC_TLS_IE_ADD,
    tls_ie_hi22 = elf.R_SPARC_TLS_IE_HI22,
    tls_ie_ld = elf.R_SPARC_TLS_IE_LD,
    tls_ie_ldx = elf.R_SPARC_TLS_IE_LDX,
    tls_ie_lo10 = elf.R_SPARC_TLS_IE_LO10,
    tls_ldm_add = elf.R_SPARC_TLS_LDM_ADD,
    tls_ldm_call = elf.R_SPARC_TLS_LDM_CALL,
    tls_ldm_hi22 = elf.R_SPARC_TLS_LDM_HI22,
    tls_ldm_lo10 = elf.R_SPARC_TLS_LDM_LO10,
    tls_ldo_add = elf.R_SPARC_TLS_LDO_ADD,
    tls_ldo_hix22 = elf.R_SPARC_TLS_LDO_HIX22,
    tls_ldo_lox10 = elf.R_SPARC_TLS_LDO_LOX10,
    tls_le_hix22 = elf.R_SPARC_TLS_LE_HIX22,
    tls_le_lox10 = elf.R_SPARC_TLS_LE_LOX10,
    tls_tpoff32 = elf.R_SPARC_TLS_TPOFF32,
    tls_tpoff64 = elf.R_SPARC_TLS_TPOFF64,
    ua16 = elf.R_SPARC_UA16,
    ua32 = elf.R_SPARC_UA32,
    ua64 = elf.R_SPARC_UA64,
    wdisp10 = elf.R_SPARC_WDISP10,
    wdisp16 = elf.R_SPARC_WDISP16,
    wdisp19 = elf.R_SPARC_WDISP19,
    wdisp22 = elf.R_SPARC_WDISP22,
    wdisp30 = elf.R_SPARC_WDISP30,
    wplt30 = elf.R_SPARC_WPLT30,
};
pub const Symbol = struct {
    pub const Type = enum(u32) {
        sparc_register = elf.STT_SPARC_REGISTER,
    };
};
