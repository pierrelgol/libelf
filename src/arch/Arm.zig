const std = @import("std");
const elf = @import("../elf.zig");
const Arm = @This();

pub const Arch = struct {
    pub const Flags = enum(u32) {
        align8 = elf.EF_ARM_ALIGN8,
        be8 = elf.EF_ARM_BE8,
        dynsymsusesegidx = elf.EF_ARM_DYNSYMSUSESEGIDX,
        eabimask = elf.EF_ARM_EABIMASK,
        eabi_unknown = elf.EF_ARM_EABI_UNKNOWN,
        eabi_ver1 = elf.EF_ARM_EABI_VER1,
        eabi_ver2 = elf.EF_ARM_EABI_VER2,
        eabi_ver3 = elf.EF_ARM_EABI_VER3,
        eabi_ver4 = elf.EF_ARM_EABI_VER4,
        eabi_ver5 = elf.EF_ARM_EABI_VER5,
        hasentry = elf.EF_ARM_HASENTRY,
        le8 = elf.EF_ARM_LE8,
        mapsymsfirst = elf.EF_ARM_MAPSYMSFIRST,
        maverick_float = elf.EF_ARM_MAVERICK_FLOAT,
        new_abi = elf.EF_ARM_NEW_ABI,
        old_abi = elf.EF_ARM_OLD_ABI,
        pic = elf.EF_ARM_PIC,
        relexec = elf.EF_ARM_RELEXEC,
        soft_float = elf.EF_ARM_SOFT_FLOAT,
        symsaresorted = elf.EF_ARM_SYMSARESORTED,
        vfp_float = elf.EF_ARM_VFP_FLOAT,
        _,

        pub const interwork = elf.EF_ARM_INTERWORK;

        pub const Abi = enum(u32) {
            abi_float_hard = elf.EF_ARM_ABI_FLOAT_HARD,
            abi_float_soft = elf.EF_ARM_ABI_FLOAT_SOFT,
        };

        pub const Apc = enum(u32) {
            apcs_26 = elf.EF_ARM_APCS_26,
            apcs_float = elf.EF_ARM_APCS_FLOAT,
        };
    };
};

pub const Program = struct {
    pub const Type = enum(u32) {
        arm_exidx = elf.PT_ARM_EXIDX,
        _,
    };

    pub const Flags = enum(u32) {
        abs = elf.PF_ARM_ABS,
        pi = elf.PF_ARM_PI,
        sb = elf.PF_ARM_SB,
        _,
    };
};

pub const Section = struct {
    pub const Flags = enum(u32) {
        comdef = elf.SHF_ARM_COMDEF,
        entrysect = elf.SHF_ARM_ENTRYSECT,
    };

    pub const Type = enum(u32) {
        attributes = elf.SHT_ARM_ATTRIBUTES,
        exidx = elf.SHT_ARM_EXIDX,
        preemptmap = elf.SHT_ARM_PREEMPTMAP,
    };
};

pub const Symbol = struct {
    pub const Type = enum(u8) {
        @"16bit" = elf.STT_ARM_16BIT,
        tfunc = elf.STT_ARM_TFUNC,
    };
};

pub const Relocation = enum(u16) {
    abs12 = elf.R_ARM_ABS12,
    abs16 = elf.R_ARM_ABS16,
    abs32 = elf.R_ARM_ABS32,
    abs32_noi = elf.R_ARM_ABS32_NOI,
    abs8 = elf.R_ARM_ABS8,
    alu_pcrel_15_8 = elf.R_ARM_ALU_PCREL_15_8,
    alu_pcrel_23_15 = elf.R_ARM_ALU_PCREL_23_15,
    alu_pcrel_7_0 = elf.R_ARM_ALU_PCREL_7_0,
    alu_pc_g0 = elf.R_ARM_ALU_PC_G0,
    alu_pc_g0_nc = elf.R_ARM_ALU_PC_G0_NC,
    alu_pc_g1 = elf.R_ARM_ALU_PC_G1,
    alu_pc_g1_nc = elf.R_ARM_ALU_PC_G1_NC,
    alu_pc_g2 = elf.R_ARM_ALU_PC_G2,
    alu_sbrel_19_12 = elf.R_ARM_ALU_SBREL_19_12,
    alu_sbrel_27_20 = elf.R_ARM_ALU_SBREL_27_20,
    alu_sb_g0 = elf.R_ARM_ALU_SB_G0,
    alu_sb_g0_nc = elf.R_ARM_ALU_SB_G0_NC,
    alu_sb_g1 = elf.R_ARM_ALU_SB_G1,
    alu_sb_g1_nc = elf.R_ARM_ALU_SB_G1_NC,
    alu_sb_g2 = elf.R_ARM_ALU_SB_G2,
    amp_vcall9 = elf.R_ARM_AMP_VCALL9,
    base_abs = elf.R_ARM_BASE_ABS,
    call = elf.R_ARM_CALL,
    copy = elf.R_ARM_COPY,
    glob_dat = elf.R_ARM_GLOB_DAT,
    gnu_vtentry = elf.R_ARM_GNU_VTENTRY,
    gnu_vtinherit = elf.R_ARM_GNU_VTINHERIT,
    got32 = elf.R_ARM_GOT32,
    gotoff = elf.R_ARM_GOTOFF,
    gotoff12 = elf.R_ARM_GOTOFF12,
    gotpc = elf.R_ARM_GOTPC,
    gotrelax = elf.R_ARM_GOTRELAX,
    got_abs = elf.R_ARM_GOT_ABS,
    got_brel12 = elf.R_ARM_GOT_BREL12,
    got_prel = elf.R_ARM_GOT_PREL,
    irelative = elf.R_ARM_IRELATIVE,
    jump24 = elf.R_ARM_JUMP24,
    jump_slot = elf.R_ARM_JUMP_SLOT,
    ldc_pc_g0 = elf.R_ARM_LDC_PC_G0,
    ldc_pc_g1 = elf.R_ARM_LDC_PC_G1,
    ldc_pc_g2 = elf.R_ARM_LDC_PC_G2,
    ldc_sb_g0 = elf.R_ARM_LDC_SB_G0,
    ldc_sb_g1 = elf.R_ARM_LDC_SB_G1,
    ldc_sb_g2 = elf.R_ARM_LDC_SB_G2,
    ldrs_pc_g0 = elf.R_ARM_LDRS_PC_G0,
    ldrs_pc_g1 = elf.R_ARM_LDRS_PC_G1,
    ldrs_pc_g2 = elf.R_ARM_LDRS_PC_G2,
    ldrs_sb_g0 = elf.R_ARM_LDRS_SB_G0,
    ldrs_sb_g1 = elf.R_ARM_LDRS_SB_G1,
    ldrs_sb_g2 = elf.R_ARM_LDRS_SB_G2,
    ldr_pc_g1 = elf.R_ARM_LDR_PC_G1,
    ldr_pc_g2 = elf.R_ARM_LDR_PC_G2,
    ldr_sbrel_11_0 = elf.R_ARM_LDR_SBREL_11_0,
    ldr_sb_g0 = elf.R_ARM_LDR_SB_G0,
    ldr_sb_g1 = elf.R_ARM_LDR_SB_G1,
    ldr_sb_g2 = elf.R_ARM_LDR_SB_G2,
    me_too = elf.R_ARM_ME_TOO,
    movt_abs = elf.R_ARM_MOVT_ABS,
    movt_brel = elf.R_ARM_MOVT_BREL,
    movt_prel = elf.R_ARM_MOVT_PREL,
    movw_abs_nc = elf.R_ARM_MOVW_ABS_NC,
    movw_brel = elf.R_ARM_MOVW_BREL,
    movw_brel_nc = elf.R_ARM_MOVW_BREL_NC,
    movw_prel_nc = elf.R_ARM_MOVW_PREL_NC,
    none = elf.R_ARM_NONE,
    num = elf.R_ARM_NUM,
    pc13 = elf.R_ARM_PC13,
    pc24 = elf.R_ARM_PC24,
    plt32 = elf.R_ARM_PLT32,
    plt32_abs = elf.R_ARM_PLT32_ABS,
    prel31 = elf.R_ARM_PREL31,
    rabs22 = elf.R_ARM_RABS22,
    rbase = elf.R_ARM_RBASE,
    rel32 = elf.R_ARM_REL32,
    rel32_noi = elf.R_ARM_REL32_NOI,
    relative = elf.R_ARM_RELATIVE,
    rpc24 = elf.R_ARM_RPC24,
    rrel32 = elf.R_ARM_RREL32,
    rsbrel32 = elf.R_ARM_RSBREL32,
    rxpc25 = elf.R_ARM_RXPC25,
    sbrel31 = elf.R_ARM_SBREL31,
    sbrel32 = elf.R_ARM_SBREL32,
    swi24 = elf.R_ARM_SWI24,
    target1 = elf.R_ARM_TARGET1,
    target2 = elf.R_ARM_TARGET2,
    thm_abs5 = elf.R_ARM_THM_ABS5,
    thm_alu_prel_11_0 = elf.R_ARM_THM_ALU_PREL_11_0,
    thm_got_brel12 = elf.R_ARM_THM_GOT_BREL12,
    thm_jump19 = elf.R_ARM_THM_JUMP19,
    thm_jump24 = elf.R_ARM_THM_JUMP24,
    thm_jump6 = elf.R_ARM_THM_JUMP6,
    thm_movt_abs = elf.R_ARM_THM_MOVT_ABS,
    thm_movt_brel = elf.R_ARM_THM_MOVT_BREL,
    thm_movt_prel = elf.R_ARM_THM_MOVT_PREL,
    thm_movw_abs_nc = elf.R_ARM_THM_MOVW_ABS_NC,
    thm_movw_brel = elf.R_ARM_THM_MOVW_BREL,
    thm_movw_brel_nc = elf.R_ARM_THM_MOVW_BREL_NC,
    thm_movw_prel_nc = elf.R_ARM_THM_MOVW_PREL_NC,
    thm_pc11 = elf.R_ARM_THM_PC11,
    thm_pc12 = elf.R_ARM_THM_PC12,
    thm_pc22 = elf.R_ARM_THM_PC22,
    thm_pc8 = elf.R_ARM_THM_PC8,
    thm_pc9 = elf.R_ARM_THM_PC9,
    thm_rpc22 = elf.R_ARM_THM_RPC22,
    thm_swi8 = elf.R_ARM_THM_SWI8,
    thm_tls_call = elf.R_ARM_THM_TLS_CALL,
    thm_tls_descseq = elf.R_ARM_THM_TLS_DESCSEQ,
    // thm_tls_descseq16 = elf.R_ARM_THM_TLS_DESCSEQ16,
    thm_tls_descseq32 = elf.R_ARM_THM_TLS_DESCSEQ32,
    thm_xpc22 = elf.R_ARM_THM_XPC22,
    tls_call = elf.R_ARM_TLS_CALL,
    // tls_desc = elf.R_ARM_TLS_DESC,
    tls_descseq = elf.R_ARM_TLS_DESCSEQ,
    tls_dtpmod32 = elf.R_ARM_TLS_DTPMOD32,
    tls_dtpoff32 = elf.R_ARM_TLS_DTPOFF32,
    tls_gd32 = elf.R_ARM_TLS_GD32,
    tls_gotdesc = elf.R_ARM_TLS_GOTDESC,
    tls_ie12gp = elf.R_ARM_TLS_IE12GP,
    tls_ie32 = elf.R_ARM_TLS_IE32,
    tls_ldm32 = elf.R_ARM_TLS_LDM32,
    tls_ldo12 = elf.R_ARM_TLS_LDO12,
    tls_ldo32 = elf.R_ARM_TLS_LDO32,
    tls_le12 = elf.R_ARM_TLS_LE12,
    tls_le32 = elf.R_ARM_TLS_LE32,
    tls_tpoff32 = elf.R_ARM_TLS_TPOFF32,
    v4bx = elf.R_ARM_V4BX,
    xpc25 = elf.R_ARM_XPC25,
};
