const std = @import("std");
const elf = @import("../elf.zig");
const PowerPc64 = @This();

pub const Arch = struct {
    pub const Flags = enum(u64) {
        ppc64_abi = elf.EF_PPC64_ABI,
        _,
    };
};

pub const Sto = enum(u8) {
    local_bit = elf.STO_PPC64_LOCAL_BIT,
    local_mask = elf.STO_PPC64_LOCAL_MASK,
};

pub const OptionFlags = enum(u32) {
    localentry = elf.PPC64_OPT_LOCALENTRY,
    multi_toc = elf.PPC64_OPT_MULTI_TOC,
    tls = elf.PPC64_OPT_TLS,
    _,
};

pub const Relocation = enum(u16) {
    addr14 = elf.R_PPC64_ADDR14,
    addr14_brntaken = elf.R_PPC64_ADDR14_BRNTAKEN,
    addr14_brtaken = elf.R_PPC64_ADDR14_BRTAKEN,
    addr16 = elf.R_PPC64_ADDR16,
    addr16_ds = elf.R_PPC64_ADDR16_DS,
    addr16_ha = elf.R_PPC64_ADDR16_HA,
    addr16_hi = elf.R_PPC64_ADDR16_HI,
    addr16_high = elf.R_PPC64_ADDR16_HIGH,
    addr16_higha = elf.R_PPC64_ADDR16_HIGHA,
    addr16_higher = elf.R_PPC64_ADDR16_HIGHER,
    addr16_highera = elf.R_PPC64_ADDR16_HIGHERA,
    addr16_highest = elf.R_PPC64_ADDR16_HIGHEST,
    addr16_highesta = elf.R_PPC64_ADDR16_HIGHESTA,
    addr16_lo = elf.R_PPC64_ADDR16_LO,
    addr16_lo_ds = elf.R_PPC64_ADDR16_LO_DS,
    addr24 = elf.R_PPC64_ADDR24,
    addr30 = elf.R_PPC64_ADDR30,
    addr32 = elf.R_PPC64_ADDR32,
    addr64 = elf.R_PPC64_ADDR64,
    copy = elf.R_PPC64_COPY,
    dtpmod64 = elf.R_PPC64_DTPMOD64,
    dtprel16 = elf.R_PPC64_DTPREL16,
    dtprel16_ds = elf.R_PPC64_DTPREL16_DS,
    dtprel16_ha = elf.R_PPC64_DTPREL16_HA,
    dtprel16_hi = elf.R_PPC64_DTPREL16_HI,
    dtprel16_high = elf.R_PPC64_DTPREL16_HIGH,
    dtprel16_higha = elf.R_PPC64_DTPREL16_HIGHA,
    dtprel16_higher = elf.R_PPC64_DTPREL16_HIGHER,
    dtprel16_highera = elf.R_PPC64_DTPREL16_HIGHERA,
    dtprel16_highest = elf.R_PPC64_DTPREL16_HIGHEST,
    dtprel16_highesta = elf.R_PPC64_DTPREL16_HIGHESTA,
    dtprel16_lo = elf.R_PPC64_DTPREL16_LO,
    dtprel16_lo_ds = elf.R_PPC64_DTPREL16_LO_DS,
    dtprel64 = elf.R_PPC64_DTPREL64,
    glob_dat = elf.R_PPC64_GLOB_DAT,
    got16 = elf.R_PPC64_GOT16,
    got16_ds = elf.R_PPC64_GOT16_DS,
    got16_ha = elf.R_PPC64_GOT16_HA,
    got16_hi = elf.R_PPC64_GOT16_HI,
    got16_lo = elf.R_PPC64_GOT16_LO,
    got16_lo_ds = elf.R_PPC64_GOT16_LO_DS,
    got_dtprel16_ds = elf.R_PPC64_GOT_DTPREL16_DS,
    got_dtprel16_ha = elf.R_PPC64_GOT_DTPREL16_HA,
    got_dtprel16_hi = elf.R_PPC64_GOT_DTPREL16_HI,
    got_dtprel16_lo_ds = elf.R_PPC64_GOT_DTPREL16_LO_DS,
    got_tlsgd16 = elf.R_PPC64_GOT_TLSGD16,
    got_tlsgd16_ha = elf.R_PPC64_GOT_TLSGD16_HA,
    got_tlsgd16_hi = elf.R_PPC64_GOT_TLSGD16_HI,
    got_tlsgd16_lo = elf.R_PPC64_GOT_TLSGD16_LO,
    got_tlsld16 = elf.R_PPC64_GOT_TLSLD16,
    got_tlsld16_ha = elf.R_PPC64_GOT_TLSLD16_HA,
    got_tlsld16_hi = elf.R_PPC64_GOT_TLSLD16_HI,
    got_tlsld16_lo = elf.R_PPC64_GOT_TLSLD16_LO,
    got_tprel16_ds = elf.R_PPC64_GOT_TPREL16_DS,
    got_tprel16_ha = elf.R_PPC64_GOT_TPREL16_HA,
    got_tprel16_hi = elf.R_PPC64_GOT_TPREL16_HI,
    got_tprel16_lo_ds = elf.R_PPC64_GOT_TPREL16_LO_DS,
    irelative = elf.R_PPC64_IRELATIVE,
    jmp_irel = elf.R_PPC64_JMP_IREL,
    jmp_slot = elf.R_PPC64_JMP_SLOT,
    none = elf.R_PPC64_NONE,
    plt16_ha = elf.R_PPC64_PLT16_HA,
    plt16_hi = elf.R_PPC64_PLT16_HI,
    plt16_lo = elf.R_PPC64_PLT16_LO,
    plt16_lo_ds = elf.R_PPC64_PLT16_LO_DS,
    plt32 = elf.R_PPC64_PLT32,
    plt64 = elf.R_PPC64_PLT64,
    pltgot16 = elf.R_PPC64_PLTGOT16,
    pltgot16_ds = elf.R_PPC64_PLTGOT16_DS,
    pltgot16_ha = elf.R_PPC64_PLTGOT16_HA,
    pltgot16_hi = elf.R_PPC64_PLTGOT16_HI,
    pltgot16_lo = elf.R_PPC64_PLTGOT16_LO,
    pltgot16_lo_ds = elf.R_PPC64_PLTGOT16_LO_DS,
    pltrel32 = elf.R_PPC64_PLTREL32,
    pltrel64 = elf.R_PPC64_PLTREL64,
    rel14 = elf.R_PPC64_REL14,
    rel14_brntaken = elf.R_PPC64_REL14_BRNTAKEN,
    rel14_brtaken = elf.R_PPC64_REL14_BRTAKEN,
    rel16 = elf.R_PPC64_REL16,
    rel16_ha = elf.R_PPC64_REL16_HA,
    rel16_hi = elf.R_PPC64_REL16_HI,
    rel16_lo = elf.R_PPC64_REL16_LO,
    rel24 = elf.R_PPC64_REL24,
    rel32 = elf.R_PPC64_REL32,
    rel64 = elf.R_PPC64_REL64,
    relative = elf.R_PPC64_RELATIVE,
    sectoff = elf.R_PPC64_SECTOFF,
    sectoff_ds = elf.R_PPC64_SECTOFF_DS,
    sectoff_ha = elf.R_PPC64_SECTOFF_HA,
    sectoff_hi = elf.R_PPC64_SECTOFF_HI,
    sectoff_lo = elf.R_PPC64_SECTOFF_LO,
    sectoff_lo_ds = elf.R_PPC64_SECTOFF_LO_DS,
    tls = elf.R_PPC64_TLS,
    tlsgd = elf.R_PPC64_TLSGD,
    tlsld = elf.R_PPC64_TLSLD,
    toc = elf.R_PPC64_TOC,
    toc16 = elf.R_PPC64_TOC16,
    toc16_ds = elf.R_PPC64_TOC16_DS,
    toc16_ha = elf.R_PPC64_TOC16_HA,
    toc16_hi = elf.R_PPC64_TOC16_HI,
    toc16_lo = elf.R_PPC64_TOC16_LO,
    toc16_lo_ds = elf.R_PPC64_TOC16_LO_DS,
    tocsave = elf.R_PPC64_TOCSAVE,
    tprel16 = elf.R_PPC64_TPREL16,
    tprel16_ds = elf.R_PPC64_TPREL16_DS,
    tprel16_ha = elf.R_PPC64_TPREL16_HA,
    tprel16_hi = elf.R_PPC64_TPREL16_HI,
    tprel16_high = elf.R_PPC64_TPREL16_HIGH,
    tprel16_higha = elf.R_PPC64_TPREL16_HIGHA,
    tprel16_higher = elf.R_PPC64_TPREL16_HIGHER,
    tprel16_highera = elf.R_PPC64_TPREL16_HIGHERA,
    tprel16_highest = elf.R_PPC64_TPREL16_HIGHEST,
    tprel16_highesta = elf.R_PPC64_TPREL16_HIGHESTA,
    tprel16_lo = elf.R_PPC64_TPREL16_LO,
    tprel16_lo_ds = elf.R_PPC64_TPREL16_LO_DS,
    tprel64 = elf.R_PPC64_TPREL64,
    uaddr16 = elf.R_PPC64_UADDR16,
    uaddr32 = elf.R_PPC64_UADDR32,
    uaddr64 = elf.R_PPC64_UADDR64,
};
